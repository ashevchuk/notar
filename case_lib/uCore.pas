unit uCore;

interface

uses
	Classes, SysUtils, Windows, uDic;

//-----------------------------------------------------
type
  TCallbackProc = procedure(pMessage: PChar); stdcall;
  TDLLHandler = procedure (Reason: Integer); stdcall;

	//-----------------------------------------------------
  СписокЗначений = class(TStringList)
  public
    function Получить(Строка: String): TObject;
    procedure Установить(Строка: String; Значение: TObject);
    function НайтиЗначение(Значение: TObject): Integer; overload;
    function НайтиЗначение(Значение: String): Integer; overload;
    //procedure ДобавитьЗначение(Значение: TObject; Представление: String = ''); overload;
    procedure ДобавитьЗначение(Значение: String; Представление: String = ''); overload;
    function РазмерСписка(): Integer;
    function ПолучитьЗначениеОбъект(Позиция: Integer): TObject;
    function ПолучитьЗначение(Позиция: Integer): String;
  end;

	//-----------------------------------------------------
  Текст = class(TStringList)
  public
  	function КоличествоСтрок(): Integer;
    function ПолучитьСтроку(Номер: Integer): String;
    procedure Открыть(ИмяФайла: String);
    procedure ДобавитьСтроку(Строка: String);
    procedure Записать(ИмяФайла: String);
	end;

	//-----------------------------------------------------
  PPartsFIO = ^TPartsFIO;
  TPartsFIO = record
    pLastName, pFirstName, pMiddleName : PChar;
    nLastName, nFirstName, nMiddleName : LongInt;
  end;

//	//-----------------------------------------------------
//  // Не реализован пока
//  ТаблицаЗначений = class(TStringList)
//  private
//    Колонки: СписокЗначений;
//    Строки: СписокЗначений;
//  public
//    constructor Create;
//    destructor Destroy; override;
//  	function КоличествоКолонок(): Integer;
//    function ПолучитьПараметрыКолонки(Номер: Integer): String;
//	end;

//-----------------------------------------------------
const
	РазделительСтрок = #13#10;

var
  _ПрогрессНачало: TDateTime;
  _ПрогрессСчетчик: Cardinal;
  _ПрогрессТ1: TDateTime;
  _ПрогрессЗначенияОбновления: Cardinal;
  _ПрогрессВсего: Cardinal;
  _ПрогрессСтрока: String;
  _ПрогрессВсегоСекунд: Cardinal;
  _ПрогрессПериод: Double;
  _ПрогрессОтВремени: Byte;

  ВыводитьНеопределенности: Byte;
  стрБазовыеИсключения: String;
  спИсключения: СписокЗначений;
  ИмяФайлаИсключений: String;
  ИмяФайлаИД: String;

  StatusProc: TCallbackProc;
  MessageProc: TCallbackProc;

  SaveDllProc: TDLLHandler;

//-----------------------------------------------------
procedure Init;
procedure DeInit;
//-----------------------------------------------------
// Переопределение стандартных функций 1С
//-----------------------------------------------------
function Найти(Строка, Подстрока: String): Integer;
function СокрЛП(Строка: String): String;
function СокрЛ(Строка: String): String;
function Лев(Строка: String; Число: Integer): String;
function Прав(Строка: String; Число: Integer): String;
function Сред(Строка: String; Позиция: Integer; Число: Integer = MaxInt): String;
function СтрДлина(Строка: String): Integer;
function Врег(Строка: String): String;
function Нрег(Строка: String): String;
function Строка(Число: Integer): String; overload;
function Число(Строка: String): Integer;
function Мин(Число1, Число2: Integer): Integer;
function Макс(Число1, Число2: Integer): Integer;
function ПустаяСтрока(Строка: String): Integer;
function СтрЗаменить(Строка, Что, Чем: String): String;
//-----------------------------------------------------
// СКЛОНЕНИЕ
//-----------------------------------------------------
procedure склИзвлечьФИО(Стр: string; var Фамилия, Имя, Отчество: string);
function склГласная(Буква, Страна: string): Byte;
function склШипящая(Буква, Страна: string): Byte;
function склМягкая(Буква, СледБуква, ПредБуква, Страна: string): Byte;
function склОкончание(Слово: string; var СловоБезОкончания: string; Страна: string = 'UA'): String;
function склПолучитьГруппуИТип(Слово: string; var Группа: integer; var Тип: string; Окончание: string; ДлинаОкончания: integer; ПоследняяБукваОкончания, КонечнаяСогласнаяОсновы, Род, Страна: string): Byte;
function склВернутьРег(РезСлово, ИсхСлово: string): string;
function склСклонятьСлово(ИсхСлово, Пол: string; var ОбработалиСуществительноеДолжности: byte; Падеж: byte = 2; Страна: string = 'UA'; ФИО: string = ''; ЧастьРечи: string = ''; ИмяСпрИсключений: string = 'СклонениеИсключения'): string;
function склОпределитьПолПоОтчеству(Отчество: String): String;
function склСклонятьФИО(ФИО, Пол: string; Падеж: byte = 2; Страна: string = 'UA'; СократитьИО: byte = 0; ПроверятьПол: byte = 1): String;
function склСклонятьФИО3(Фамилия, Имя, Отчество, Пол: string; Падеж: byte = 2; Страна: string = 'UA'; СократитьИО: byte = 0; ПроверятьПол: byte = 1): String;
function склСловаВСписок(Слова: String): СписокЗначений;
function склСклонятьДолжность(Должность, Отдел, Пол: String; Падеж: Byte = 2; Страна: String = 'UA'): String;
procedure ОчиститьИсключения();
procedure ИсключенияИзСтрокиВСтруктуру(ОбъектТекст: Текст);
function ОбновитьФайлИсключений(): Boolean;


implementation

//-----------------------------------------------------
procedure Состояние(Строка: String);
begin
  // Вызываем колбэк состояния
  if Assigned(StatusProc) then
  	StatusProc(PWideChar(Строка));
end;

//-----------------------------------------------------
procedure Сообщить(Строка: String; Знак: String = '');
begin
  // Вызываем колбэк сообщить (когда узнаю как)
  if Assigned(MessageProc) then
  	MessageProc(PWideChar(Знак + Строка));
end;

//-----------------------------------------------------
function СписокЗначений.Получить(Строка: string): TObject;
var i: integer;
begin
  i := Self.IndexOf(Строка);
  if i >= 0 then
    Result := Self.Objects[i]
  else
    Result := nil;
end;

//-----------------------------------------------------
procedure СписокЗначений.Установить(Строка: string; Значение: TObject);
var i: integer;
begin
  i := Self.IndexOf(Строка);
  if i >= 0 then
    Self.Objects[i] := Значение
  else
	  Self.AddObject(Строка, Значение);
end;

//-----------------------------------------------------
function СписокЗначений.НайтиЗначение(Значение: TObject): Integer;
begin
  Result := Self.IndexOfObject(Значение) + 1;
end;

//-----------------------------------------------------
function СписокЗначений.НайтиЗначение(Значение: String): Integer;
begin
	Result := Self.IndexOf(Значение) + 1;
end;

//-----------------------------------------------------
procedure СписокЗначений.ДобавитьЗначение(Значение: String; Представление: String = '');
begin
  Self.Add(Значение);
end;

//-----------------------------------------------------
function СписокЗначений.РазмерСписка(): Integer;
begin
	Result := Self.Count;
end;

//-----------------------------------------------------
function СписокЗначений.ПолучитьЗначениеОбъект(Позиция: Integer): TObject;
begin
  if (Позиция >= 1)
  and (Позиция <= Self.Count) then
	  Result := Self.Objects[Позиция - 1]
  else
		raise Exception.Create('Выход за пределы списка значений. ПолучитьЗначение(). Позиция: '+IntToStr(Позиция)+'. Элементов в списке: '+IntToStr(Self.Count));
end;

//-----------------------------------------------------
function СписокЗначений.ПолучитьЗначение(Позиция: Integer): String;
begin
  if (Позиция >= 1)
  and (Позиция <= Self.Count) then
	  Result := Self[Позиция - 1]
  else
		raise Exception.Create('Выход за пределы списка значений. ПолучитьЗначениеСтроки(). Позиция: '+IntToStr(Позиция)+'. Элементов в списке: '+IntToStr(Self.Count));
end;

////-----------------------------------------------------
//constructor ТаблицаЗначений.Create;
//begin
//	inherited Create;
//	Колонки := СписокЗначений.Create;
//  Строки := СписокЗначений.Create;
//end;
//
////-----------------------------------------------------
//destructor ТаблицаЗначений.Destroy;
//begin
//	Колонки.Free;
//  Строки.Free;
//	inherited Destroy;
//end;
//
////-----------------------------------------------------
//function ТаблицаЗначений.КоличествоКолонок: Integer;
//begin
//	Result := Колонки.РазмерСписка();
//end;
//
////-----------------------------------------------------
//function ТаблицаЗначений.ПолучитьПараметрыКолонки(Номер: Integer): String;
//begin
//	Result := String(Колонки.ПолучитьЗначение(Номер));
//end;

//-----------------------------------------------------
function Текст.КоличествоСтрок(): Integer;
begin
	Result := Self.Count;
end;

//-----------------------------------------------------
function Текст.ПолучитьСтроку(Номер: Integer): String;
begin
	Result := Self.Strings[Номер-1];
end;

//-----------------------------------------------------
procedure Текст.Открыть(ИмяФайла: String);
begin
  Self.LoadFromFile(ИмяФайла);
end;

//-----------------------------------------------------
procedure Текст.ДобавитьСтроку(Строка: String);
begin
  Self.Add(Строка);
end;

//-----------------------------------------------------
procedure Текст.Записать(ИмяФайла: String);
begin
  Self.SaveToFile(ИмяФайла);
end;

//-----------------------------------------------------
// Переопределение стандартных функций 1С
//-----------------------------------------------------

function Найти(Строка, Подстрока: String): Integer;
begin
  Result := Pos(Подстрока, Строка);
end;

function СокрЛП(Строка: String): String;
begin
  Result := Trim(Строка);
end;

function СокрЛ(Строка: String): String;
begin
  Result := TrimLeft(Строка);
end;

function Лев(Строка: String; Число: Integer): String;
begin
  Result := Copy(Строка, 1, Число);
end;

function Прав(Строка: String; Число: Integer): String;
begin
  Result := Copy(Строка, Length(Строка) - Число + 1, Число);
end;

function Сред(Строка: String; Позиция: Integer; Число: Integer = MaxInt): String;
begin
  Result := Copy(Строка, Позиция, Число);
end;

function СтрДлина(Строка: String): Integer;
begin
  Result := Length(Строка);
end;

function Врег(Строка: String): String;
begin
  Result := AnsiUpperCase(Строка);
end;

function Нрег(Строка: String): String;
begin
  Result := AnsiLowerCase(Строка);
end;

function Строка(Число: Integer): String; overload;
begin
  Result := IntToStr(Число);
end;

//function Строка(AObject: TObject): String; overload;
//begin
//  Result := String(AObject);
//end;

function Число(Строка: String): Integer;
begin
	try
	  Result := StrToInt(Строка);
  except
	  Result := 0;
  end;
end;

function Мин(Число1, Число2: Integer): Integer;
begin
  if Число1 < Число2 then
    Result := Число1
  else
    Result := Число2;
end;

function Макс(Число1, Число2: Integer): Integer;
begin
  if Число1 > Число2 then
    Result := Число1
  else
    Result := Число2;
end;

function ПустаяСтрока(Строка: String): Integer;
begin
  Result := ord(Trim(Строка) = '');
end;

function СтрЗаменить(Строка, Что, Чем: String): String;
begin
  Result := StringReplace(Строка, Что, Чем, [rfReplaceAll]);
end;

//-----------------------------------------------------
// ПРОГРЕСС
//-----------------------------------------------------

//-----------------------------------------------------
// Инициация прогресса For заранее известного числа итераций
// Всего            - число элементов в выборке
// ПериодОбновления - число милисекунд после которого обновить сторку состояния
// ОтВремени        - 1 - обновлять от времени, 0 - обновлять каждые ПериодОбновления значения счетчика
//
// Все используемые переменные глобальные, For упрощения вызова
//
procedure глПрогрессСоздать(Всего: Cardinal; СтрокаСостояния: string = 'Обработано: '; ПериодОбновления: Double = 100; ОтВремени: Byte = 1);
begin

	_ПрогрессНачало := 0;
	_ПрогрессСчетчик := 0;
	_ПрогрессТ1 := GetTime;
	_ПрогрессЗначенияОбновления := 0;
	_ПрогрессВсего := Всего;
	_ПрогрессСтрока := СтрокаСостояния;
	_ПрогрессВсегоСекунд := 0;
	_ПрогрессПериод := 1 / ПериодОбновления;
	_ПрогрессОтВремени := ОтВремени;

end;

//-----------------------------------------------------
// Перед циклом вызовите глПрогрессСоздать(ВсегоИтераций);
// глПрогресс() - Вызывайте в каждой итерации цикла For
// отображения прогресса (%), and остатка времени (чч:мм:сс)
//
// Остаток времени, дается приближенноо, на основе уже потраченного.
// В случае нелинейной зависимости времени от числа итераций,
// ожидаемое время может несовпадать с обещанным.
//
procedure глПрогресс();
var
  Т2, ДельтаТ, ВсегоТ, ОсталосьТ: TDateTime;
  ЗначенияОбновления, ПрошлоСекунд, ОсталосьСекунд: Cardinal;
  Коэф: Double;
  Процент, чч, мм, сс: String;
begin

	_ПрогрессСчетчик := _ПрогрессСчетчик + 1;
	If _ПрогрессОтВремени = 1 then begin
		Т2 := GetTime();
		ДельтаТ := Т2 - _ПрогрессТ1;
		ЗначенияОбновления := Trunc(ДельтаТ * _ПрогрессПериод);
	end else begin
		ЗначенияОбновления := Trunc(_ПрогрессСчетчик * _ПрогрессПериод);
	End;
	If ЗначенияОбновления <> _ПрогрессЗначенияОбновления then begin
		_ПрогрессЗначенияОбновления := ЗначенияОбновления;
		Коэф := _ПрогрессСчетчик / _ПрогрессВсего;
		Процент := Format('%f5.1', [Коэф * 100]);
		If _ПрогрессОтВремени = 0 then begin
			Т2 := GetTime();
			ДельтаТ := Т2 - _ПрогрессТ1;
    End;
		ПрошлоСекунд := Round(ДельтаТ * 0.001);
		ВсегоТ := ДельтаТ / Коэф;
		_ПрогрессВсегоСекунд := Round(ВсегоТ * 0.001);
		ОсталосьТ := ВсегоТ - ДельтаТ;
		ОсталосьСекунд := Round(ОсталосьТ * 0.001);
		чч := Format('%2d', [Trunc(ОсталосьСекунд / 3600)]);
		мм := Format('%2d', [Trunc(ОсталосьСекунд mod 3600 / 60)]);
		сс := Format('%2d', [ОсталосьСекунд mod 60]);
		Состояние(_ПрогрессСтрока + Процент + '%. Осталось: '+чч+':'+мм+':'+сс);
  End;

end;

//-----------------------------------------------------
// Сколько времени занял последний обход
function глПрогрессЗанял(): String;
var
  стр, чч, мм, сс: String;
begin
	чч := Format('%2d', [Trunc(_ПрогрессВсегоСекунд / 3600)]);
	мм := Format('%2d', [Trunc(_ПрогрессВсегоСекунд mod 3600 / 60)]);
	сс := Format('%2d', [_ПрогрессВсегоСекунд mod 60]);
	стр := _ПрогрессСтрока+IntToStr(_ПрогрессСчетчик)+' за '+чч+':'+мм+':'+сс;
	Сообщить(стр);
	Result := стр;
end;


//-----------------------------------------------------
// СКЛОНЕНИЕ
//-----------------------------------------------------

//-----------------------------------------------------
// Извлекаем из строки ФИО to составляющим
procedure склИзвлечьФИО(Стр: string; var Фамилия, Имя, Отчество: string);
var
  Поз: Integer;
begin
	Фамилия := '';
	Имя := '';
	Отчество := '';
	Поз := Найти(Стр, ' ');
	If Поз > 0 then begin
		Фамилия := СокрЛП(Лев(Стр, Поз - 1));
		Стр := СокрЛ(Сред(Стр, Поз + 1));
		Поз := Найти(Стр, ' ');
		If Поз > 0 then begin
			Имя := СокрЛП(Лев(Стр, Поз - 1));
			Отчество := СокрЛП(Сред(Стр, Поз + 1));
    end else begin
			Имя := СокрЛП(Стр);
    end;
  end else begin
		Фамилия := СокрЛП(Стр);
  end;
end;

//-----------------------------------------------------
function склГласная(Буква, Страна: string): Byte;
begin
  Result := ord(not ((СтрДлина(Буква) = 0) or (Найти('аеёиоуэыюяіїє''`"', Буква) = 0)));
end;

//-----------------------------------------------------
function склШипящая(Буква, Страна: string): Byte;
begin
  Result := ord(not ((СтрДлина(Буква) = 0) or (Найти('жшчщ', Буква) = 0)));
end;

//-----------------------------------------------------
// В українській мові м'якими не можуть бути губні м, в, б, п, ф,
// шиплячі ж, дж, ш, ч (пом'якшуються лише подовжені шиплячі:
// затишшя, роздоріжжя, річчю), задньоротові ґ, г, к, х
//
function склМягкая(Буква, СледБуква, ПредБуква, Страна: string): Byte;
begin
	Result := 0;
	If ПредБуква = '' then begin
		If СледБуква <> 'ь' then begin
      Exit;
    end;
  end;
	If склГласная(Буква, Страна) = 1 then begin
		//
	end else if (СтрДлина(Буква) > 0) and (Найти('мвбпф', Буква) > 0) then begin // губные
		//
	end else if (СтрДлина(Буква) > 0) and (Найти('ґгкх', Буква) > 0) then begin  // глухие
		//
	end else if склШипящая(Буква, Страна) = 1 then begin

		Result := ord(Буква = ПредБуква);
	end else if (СтрДлина(СледБуква) > 0) and (Найти('яюєіїь', СледБуква) > 0) then begin
		Result := 1;
	end else if Буква = 'ь' then begin
		Result := склМягкая(ПредБуква, Буква, '', Страна);
	//end else if (Буква = 'й') and (СтрДлина(ПредБуква) > 0) and (Найти('яюєіїь', ПредБуква) > 0) then begin
	end else if (Буква = 'й')
  and (СтрДлина(ПредБуква) > 0)
  and (склГласная(ПредБуква, Страна) = 1) then begin
		// Нет в правилах... проверить... пример Сергій (2-ая группа, Мягкая)
		// Пример Талалай
		Result := 1;
	end;
end;

//-----------------------------------------------------
// Возвращает гласные в конце слова,
// Изменяет СловоБезОкончания
function склОкончание(Слово: string; var СловоБезОкончания: string; Страна: string = 'UA'): String;
var
  Длина: Integer;
  к: Integer;
  Буква: String;
begin
	Result := '';
	Длина := СтрДлина(Слово);
	For к := -Длина to -1 do begin
		Буква := Сред(Слово, -к, 1);
		If склГласная(Буква, Страна) = 1 then begin
			Result := Буква + Result;
		end else begin
      Break;
		end;
	end;
	СловоБезОкончания := Лев(Слово, СтрДлина(Слово) - СтрДлина(Result));
end;

//-----------------------------------------------------
// Род - м, ж, с
// Возвращает 1 - If успешно, 0 - неуспешно
// Изменят Группа and Тип
// Группа = 1,2,3,4
// Тип = 'Т', 'М', 'С' - твердый, мягкий, смешанный
//
function склПолучитьГруппуИТип(Слово: string; var Группа: integer; var Тип: string; Окончание: string; ДлинаОкончания: integer; ПоследняяБукваОкончания, КонечнаяСогласнаяОсновы, Род, Страна: string): Byte;
var
  ПерваяБукваОкончания,
  ПредКонечнаяОсновы,
  ПредпоследняяБукваОкончания: string;
  Мягкая,
  Твердая,
  Шипящая: Byte;
begin

	Result := 0;

	Группа := 0;
	If ДлинаОкончания > 0 then begin
		If ((Род = 'м') or (Род = 'ж'))
		and ((ПоследняяБукваОкончания = 'а')
		or (ПоследняяБукваОкончания = 'я')) then begin
			// Здесь может быть 4-ая группа For среднего рода, определить можно только склонением.
			// and 2-ая группа среднего рода, определить как неизвестно...
			Группа := 1;
		end else if (Род = 'м')
		and (ПоследняяБукваОкончания = 'о') then begin
			Группа := 2;
		end else if (Род = 'с')
		and (ПоследняяБукваОкончания <> '')
		and (Найти('оея', ПоследняяБукваОкончания) > 0) then begin
			Группа := 2;
		end else begin
			If ВыводитьНеопределенности = 1 then begin
				Сообщить('Неопределена группа, род: '+Род+' окончание: -'+ПоследняяБукваОкончания+'! '+Слово, '!');
			end;
			Exit;
		end;
	end else begin
		If (Род = 'м') or (Род = 'с') then begin
			Группа := 2;
		end else if (Род = 'ж') then begin
			Группа := 3;
		end else begin
			If ВыводитьНеопределенности = 1 then begin
				Сообщить('Неопределена группа, род: '+Род+' без окончания! '+Слово, '!');
			end;
			Exit;
		end;
	end;

	ПерваяБукваОкончания := Лев(Окончание, 1);
	ПредКонечнаяОсновы := '';
	If СтрДлина(Слово) - ДлинаОкончания > 1 then begin
		ПредКонечнаяОсновы := Сред(Слово, СтрДлина(Слово) - ДлинаОкончания - 1, 1);
	end;

	// Последняя согласная основы
	ПредпоследняяБукваОкончания := '';
	If (ДлинаОкончания > 1) then begin
		ПредпоследняяБукваОкончания := Сред(Окончание, СтрДлина(Окончание) - 1, 1);
	end;

	If (ДлинаОкончания > 1)
	and (склГласная(ПредпоследняяБукваОкончания, Страна) = 1)
	and (Найти('іяєюї', ПоследняяБукваОкончания) > 0)
	then begin
		Мягкая := 1;
	end else begin
		Мягкая := склМягкая(КонечнаяСогласнаяОсновы, ПерваяБукваОкончания, ПредКонечнаяОсновы, Страна);
	end;
	Твердая := 1 - Мягкая;
	Шипящая := склШипящая(КонечнаяСогласнаяОсновы, Страна);

	If Группа = 1 then begin
		If (Твердая = 1) and (Шипящая = 0) then begin
			Тип := 'Т';
		end else if (Твердая = 1) and (Шипящая = 1) then begin
			Тип := 'С';
		end else if (Мягкая = 1) then begin
			Тип := 'М';
		end;
	end else if Группа = 2 then begin
		If (КонечнаяСогласнаяОсновы = 'р')
		and (склГласная(ПредКонечнаяОсновы, Страна) = 1) then begin
			// Тут тип определить сложно, так как нужно сначала просклонять...
			// А так как вызов идет из функции склонения For осуществления склонения
			// то цепочка бесконечна...
		  If (спИсключения.Получить('МягкаяР') is СписокЗначений)
			and (СписокЗначений(спИсключения.Получить('МягкаяР')).НайтиЗначение(Слово) > 0) then begin
			//Найти('ігор лазар секретар ', Слово+' ') > 0 then begin
				// Ігор - Ігорем, Єгор
				Тип := 'М';
			end else begin
				Тип := 'Т';
			end;
		end else if (Твердая = 1) and (Шипящая = 0) then begin
			If КонечнаяСогласнаяОсновы = 'ь' then begin
				Тип := 'С';
			end else begin
				Тип := 'Т';
			end;
		end else if (Род = 'м') and (Мягкая = 1) then begin
			Тип := 'М';
		end else if (Род = 'с') and (Окончание = 'е') and (Шипящая = 0) then begin
			Тип := 'М';
		end else if (Род = 'с') and (ПоследняяБукваОкончания = 'я') then begin
			Тип := 'М';
		end else if (Найти('мс', Род) > 0) and (Шипящая = 1) then begin
			Тип := 'С';
		end;
	end else if Группа = 3 then begin
		Тип := '-';
		If (Мягкая = 1) or (Шипящая = 1) then begin
			Тип := 'М';
		end else if (Твердая = 1) and (Шипящая = 0) then begin
			Тип := 'Т';
		end;
	end;

	If Тип = '' then begin
		If ВыводитьНеопределенности = 1 then begin
			Сообщить('Неопределен тип, род: '+Род+', группа: '+IntToStr(Группа)+'! '+Слово, '!');
		end;
    Exit;
	end;

  Result := ord((Группа > 0) and (Тип <> ''));
end;

//-----------------------------------------------------
// Возвращает регистр символов измененной строке по исходной строке.
// Три варианта - 1) Первая буква в верхнем регистре
//                2) Все буквы в верхнем регистре
//                3) Все буквы в нижнем регистре
// Аббревиатуры не склоняем пока
function склВернутьРег(РезСлово, ИсхСлово: string): string;
begin
	//Поз = Найти(ИсхСлово, '.');
	//If Поз > 0 then begin
	//	врИсхСлово = ИсхСлово;
	//	врРезСлово = РезСлово;
	//	врСлово = '';
	//	Поз = Найти(врИсхСлово, '.');
	//	While (Поз > 0) and (Поз <= СтрДлина(врРезСлово)) and (Поз <= СтрДлина(врИсхСлово)) do begin
	//		БукваПослеТочкиИсх = Сред(врИсхСлово, Поз+1, 1);
	//		БукваПослеТочкиРез = Сред(врРезСлово, Поз+1, 1);
	//		If (Нрег(БукваПослеТочкиИсх) = Нрег(БукваПослеТочкиРез)) then begin
	//			врСлово = врСлово + Лев(врРезСлово, Поз) + БукваПослеТочкиИсх;
	//		end else begin
	//			врСлово = врСлово + Лев(врРезСлово, Поз) + БукваПослеТочкиРез;
	//		end;
	//		врРезСлово = Сред(врРезСлово, Поз + 2);
	//		врИсхСлово = Сред(врИсхСлово, Поз + 2);
	//		Поз = Найти(врИсхСлово, '.');
	//	end;
	//	РезСлово = врСлово + врРезСлово;
	//end;
	If ИсхСлово = Врег(ИсхСлово) then begin
		Result := Врег(РезСлово);
		//If СтрДлина(РезСлово) > СтрДлина(ИсхСлово) then begin
		//Возврат(Врег(Лев(РезСлово, СтрДлина(ИсхСлово)))+Сред(РезСлово, СтрДлина(ИсхСлово) + 1)); // For поддержки аббревиатур
	end else if Врег(Лев(ИсхСлово, 1)) = Лев(ИсхСлово, 1) then begin
		Result := Врег(Лев(РезСлово, 1)) + Сред(РезСлово, 2);
	end else begin
		Result := РезСлово;
	end;
end;

// Склонение на украинском.
// Не поддерживает множ. число пока
//
// Не змінюються за відмінками:
// -	іншомовні слова з кінцевим голосним: Декларуа, меню, кіно, але пальто, пальта;
// +	жіночі прізвища на приголосний та -о: Ковальчук, Шевченко;
// -	російські прізвища на -ово, -аго, -их: Дурново, Живаго, Черних;
// -	абревіатури: НТР,але вузу, ЛАЗом;
// -	складноскорочені слова типу завскладу, замдекана.
//
// ФИО = 'Ф', 'И', 'О' (одно из), 'Д' (должность)
//
// ЧастьРечи:
//   'С' существительное
//   'П' прилагательное
//
function склСклонятьСлово(ИсхСлово, Пол: string; var ОбработалиСуществительноеДолжности: byte; Падеж: byte = 2; Страна: string = 'UA'; ФИО: string = ''; ЧастьРечи: string = ''; ИмяСпрИсключений: string = 'СклонениеИсключения'): string;
const
	АнглСимволы = 'iIoOpPmnBMCcXaAHKeETy*`"';
	УкрСимволы  = 'іІоОрРтпВМСсХаАНКеЕТу''''''';
var
  Слово,
  КорСлово,
  РезСлово,
  СловоБезОкончания,
  Окончание,
  БукваСлова,
  СловоДоДефиса,
  ПоследняяБукваОкончания,
  ПредпоследняяБукваОкончания,
  КонечнаяСогласнаяОсновы,
	БезКонечнойСогласнойОсновы,
  ПредКонечнаяОсновы,
  ДвеКонечныеБуквыОсновы,
  ОкончаниеБезПоследнейБуквыИ: String;
  ДлинаСлова,
  ДлинаОкончания: Integer;
  к: Integer;
  ПозЗамены,
  ПозРазделителя,
	ПозРазделителяДефис,
  СледПозРазделителяДефис,
	ПозРазделителяПробел,
  ПозТочки: Integer;
  фЧислоДоДефиса,
  фИсключениеПередДефисом,
  фНеСклоняется,
  фПрилагательное,
  фСуществительное,
  фДобавитьЗвучаниеЙ,
  фДобавитьЗвучаниеЬ: Byte;
  Группа: Integer;
	Тип: String;

  стрТриБуквыОкончанияФамилииПрилагательные,
  стрДвеБуквыОкончанияФамилииПрилагательные: string;

begin
	Слово := СокрЛП(ИсхСлово);

  if Слово = '' then
  begin
		Result := Слово;
    Exit;
  end;

	// Корректируем i, I, o, O, p, P, m, n, B, M, C, c, X, a, H, K, e, E, T, y, and апостроф
	КорСлово := '';
	ДлинаСлова := СтрДлина(Слово);
	For к := 1 to ДлинаСлова do begin
		БукваСлова := Сред(Слово, к, 1);
		ПозЗамены := Найти(АнглСимволы, БукваСлова);
		If ПозЗамены > 0 then begin
			КорСлово := КорСлово + Сред(УкрСимволы, ПозЗамены, 1);
		end else begin
			КорСлово := КорСлово + БукваСлова;
		end;
	end;
	Слово := КорСлово;

	If СтрДлина(Слово) = 1 then begin
		// Слово из одной буквы
		ОбработалиСуществительноеДолжности := 1;
    Result := Слово;
    Exit;
	end;

	If ИсхСлово = Врег(ИсхСлово) then begin
		// Капитализированное, считаем, что аббревиатура
		ОбработалиСуществительноеДолжности := 1;
    Result := Слово;
    Exit;
	end;

  // Возвращаем слово с откорректированными символами и то хлеб
  // особенно для именительного падежа
	If (Падеж = 1) then begin
		Result := Слово;
    Exit;
	end;
//	If (фДемо = 1) then begin
//    If (Падеж < 4) and (ФИО <> 'Д') then begin
//  		Result := Слово;
//      Exit;
//    end;
//	end;

	//Сообщить(Слово);

	ПозРазделителя := 0;
	ПозРазделителяДефис := Найти(Слово, '-');
	ПозРазделителяПробел := Найти(Слово, ' ');

	// Числа, т.е. возможно числительные вида 1-а, 2-а, 3-я
	фЧислоДоДефиса := 0;
	If ПозРазделителяДефис > 0 then begin
		СловоДоДефиса := СокрЛП(Лев(Слово, ПозРазделителяДефис - 1));
		If (СтрДлина(СловоДоДефиса) > 0 )
		and (СловоДоДефиса = Строка(Число(СловоДоДефиса))) then begin
			фЧислоДоДефиса := 1;
			СледПозРазделителяДефис := Найти(Сред(Слово, ПозРазделителяДефис + 1), '-');
			If СледПозРазделителяДефис > 0 then begin
				ПозРазделителяДефис := ПозРазделителяДефис + СледПозРазделителяДефис;
			end else begin
				ПозРазделителяДефис := 0;
			end;
		end;	
	end;	
	
	If ФИО = 'Д' then begin
		// Составные:
		//   заступник начальника управління - начальник відділу
		//   заступнику начальника управління - начальнику відділу
		// склоняется только первое слово, а If есть дефисы, то and первое после каждого дефиса
		// но головному бухгалтеру, провідному спеціалісту
		//   прилагательные перед первым существительным также склоняются
		// дефис разделяет составные слова
		
		ПозРазделителя := ПозРазделителяДефис;
		If ОбработалиСуществительноеДолжности = 0 then begin
			If ПозРазделителяПробел <> 0 then begin
				If ПозРазделителя = 0 then begin
					ПозРазделителя := ПозРазделителяПробел;
				end else begin
					ПозРазделителя := Мин(ПозРазделителя, ПозРазделителяПробел);
				end;
			end;	
		end;	
		If (ПозРазделителя > 0) then begin
			// Рекурсивный вызов склонения If есть '-' or ' '
			фИсключениеПередДефисом := 0;
			If ПозРазделителя = ПозРазделителяДефис then begin
				//Сообщить('Перед дефисом: '+Нрег(Лев(Слово, ПозРазделителя - 1)));
			  If (спИсключения.Получить('НеСклоняетсяПередДефисом') is СписокЗначений)
				and (СписокЗначений( спИсключения.Получить('НеСклоняетсяПередДефисом')).НайтиЗначение(Нрег(Лев(Слово, ПозРазделителя - 1))) > 0) then begin
					//Сообщить('Не склоняется');
					фИсключениеПередДефисом := 1;
				end;
			end;
			If фИсключениеПередДефисом = 1 then begin
				РезСлово := Лев(Слово, ПозРазделителя - 1);
			end else begin
				РезСлово := склСклонятьСлово(Лев(Слово, ПозРазделителя - 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений);
			end;
			If ПозРазделителя = ПозРазделителяДефис then begin
				РезСлово := РезСлово + '-';
				ОбработалиСуществительноеДолжности := 0;
			end else begin
				РезСлово := РезСлово + ' ';
			end;
			РезСлово := РезСлово + склСклонятьСлово(Сред(Слово, ПозРазделителя + 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений);
      Result := РезСлово;
      Exit;
		end else if ОбработалиСуществительноеДолжности = 1 then begin
			// Не склоняем оставшуюся часть составной должности, когда
			// обработали первое существительное
      Result := Слово;
      Exit;
		end;

	end else begin
		ПозРазделителя := ПозРазделителяДефис;
		If ПозРазделителяПробел <> 0 then begin
			If ПозРазделителя = 0 then begin
				ПозРазделителя := ПозРазделителяПробел;
			end else begin
				ПозРазделителя := Мин(ПозРазделителя, ПозРазделителяПробел);
			end;
		end;
		If (ПозРазделителя > 0) then begin
			// Рекурсивный вызов склонения If есть '-' or ' '
			фИсключениеПередДефисом := 0;
			If ПозРазделителя = ПозРазделителяДефис then begin
			  If (спИсключения.Получить('НеСклоняетсяПередДефисом') is СписокЗначений)
				and (СписокЗначений( спИсключения.Получить('НеСклоняетсяПередДефисом')).НайтиЗначение(Нрег(Лев(Слово, ПозРазделителя - 1))) > 0) then begin
					фИсключениеПередДефисом := 1;
				end;
			end;
			If фИсключениеПередДефисом = 1 then begin
				РезСлово := Лев(Слово, ПозРазделителя - 1);
			end else begin
				РезСлово := склСклонятьСлово(Лев(Слово, ПозРазделителя - 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений);
			end;
      if ПозРазделителя = ПозРазделителяДефис then begin
      	РезСлово := РезСлово + '-';
      end else begin
      	РезСлово := РезСлово + ' ';
      end;
			РезСлово := РезСлово
				+ склСклонятьСлово(Сред(Слово, ПозРазделителя + 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений);
      Result := РезСлово;
      Exit;
		end;
	end;

	// сокращения не склоняем
	If Прав(Слово, 1) = '.' then begin
  	Result := Слово;
    Exit;
	end;

	// сокращения не склоняем
	If Прав(Слово, 1) = '/' then begin
  	Result := Слово;
    Exit;
	end;

	// Разбиваем слово содержащее точки на составляющие слова
	ПозТочки := Найти(Слово, '.');
	If ПозТочки > 0 then begin
		// Рекурсивный вызов склонения If есть '.'
		// точку не отсекаем - считаем, что слово с точкой - сокращение
		РезСлово := склСклонятьСлово(Лев(Слово, ПозТочки), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений)
			+ склСклонятьСлово(Сред(Слово, ПозТочки + 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений);
  	Result := РезСлово;
    Exit;
	end;

	// Разбиваем слово содержащее / на составляющие слова
	ПозТочки := Найти(Слово, '/');
	If ПозТочки > 0 then begin
		// Рекурсивный вызов склонения If есть '/'
		// точку не отсекаем - считаем, что слово с точкой - сокращение
		РезСлово := склСклонятьСлово(Лев(Слово, ПозТочки), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений)
			+ склСклонятьСлово(Сред(Слово, ПозТочки + 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений);
  	Result := РезСлово;
    Exit;
	end;

	// Разбиваем слово содержащее ) на составляющие слова
	ПозТочки := Найти(Слово, ')');
	If (ПозТочки > 0) then begin
		// Рекурсивный вызов склонения If есть ')'
		// точку не отсекаем - считаем, что слово с точкой - сокращение
		РезСлово := склСклонятьСлово(Лев(Слово, ПозТочки - 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений)
			+ ')'
			+ склСклонятьСлово(Сред(Слово, ПозТочки + 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений);
  	Result := РезСлово;
    Exit;
	end;

	// Разбиваем слово содержащее ( на составляющие слова
	ПозТочки := Найти(Слово, '(');
	If (ПозТочки > 0) then begin
		// Рекурсивный вызов склонения If есть '('
		// точку не отсекаем - считаем, что слово с точкой - сокращение
		РезСлово := склСклонятьСлово(Лев(Слово, ПозТочки - 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений)
			+ '('
			+ склСклонятьСлово(Сред(Слово, ПозТочки + 1), Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, ФИО, ЧастьРечи, ИмяСпрИсключений);
  	Result := РезСлово;
    Exit;
	end;

	Слово := Нрег(Слово);
	Пол := Нрег(Пол);
	РезСлово := '';

	//Сообщить('П.'+Падеж+'. '+Слово+'. ОбработалиСуществительноеДолжности = '+ОбработалиСуществительноеДолжности);

	СловоБезОкончания := '';
	Окончание := склОкончание(Слово, СловоБезОкончания, Страна);
	ДлинаОкончания := СтрДлина(Окончание);

	ПоследняяБукваОкончания := '';
	ПредпоследняяБукваОкончания := '';
	If ДлинаОкончания > 0  then begin
		ПоследняяБукваОкончания := Прав(Окончание, 1);
		If ДлинаОкончания > 1 then begin
			ПредпоследняяБукваОкончания := Сред(Окончание, СтрДлина(Окончание) - 1, 1);
		end;
	end;

	РезСлово := '';
	//If склНайтиВИсключениях(Слово, Страна, ИмяСпрИсключений, ЧастьРечи, Падеж, РезСлово) = 1 then begin
	//	// If находим слово с заданным падежом в исключениеях - возвращаем
	//	//Возврат (РезСлово);
	//end;

	If фЧислоДоДефиса = 1 then begin
		// Числительное вида 1-а, 2-а, 3-я
		ЧастьРечи := 'П';
	end;

	// Числительные
	If Найти(' перш друг трет четверт п''ят шост сьом восьм дев''ят '+
	' десят одинадцят дванадцят тринадцят чотирнадцят п''ятнадцят шістнадцят сімнадцят вісімнадцят дев''ятнадцят '+
	' двадцят тридцят сороков п''ятидисят шостидесят сьомидесят восьмидесят '+
	' сот двухсот трьохсот чотирьохсот п''ятисот шостисот сьомисот восьмисот дев''ятисот '+
	' тисячн ', ' ' + СловоБезОкончания + ' ') > 0 then begin
		ЧастьРечи := 'П';
	end;

	фНеСклоняется := 0;
	If РезСлово = '' then begin
		If ФИО = 'Ф' then begin
			If (Пол = 'ж') then begin
				If (Окончание = '') or (Окончание = 'о') then begin
					фНеСклоняется := 1;
				end;
			end else if (Пол = 'м') then begin
				// For российских, но непонятно как определить? (Келих, Пелих) но (Гладких рус.)
				//If (Окончание = <> '') and (Найти('ово ако их ', Окончание+' ') then begin
				//	фНеСклоняется = 1;
				//end;
			end;
		end;
		// Иностранного происхождения не склоняются
		//+іменники, що закінчуються на -а, перед яким виступає голосний звук: амплуа, боа, Нікарагуа;
		//+на -і: колібрі, парі, поні, попурі, Марі, Голсуорсі, Капрі, Россіні, Паганіні, Шеллі;
		//+на -ї: Віньї, Шантільї;
		//+на -у: какаду, кенгуру, рагу, Баку, Шоу;
		//+на -ю (-йу або -у): меню, інтерв'ю, Сю;
		//-власні назви з приголосним перед -а: Дюма, Вольта;
		//+іменники, що закінчуються на -е (-є): кафе, кашне, турне, каре, піке, протеже, Беранже, Гейне, Гете, Данте; ательє, Готьє, Лавуазьє;
		//-на -o: авто, бюро, депо, кіно, манто, метро, радіо, Арно, Буало, Гюго, Дідро, Лонгфелло, Тюссо, Глазго (але виняток становить слово пальто, яке відмінюється як іменники ІІ відміни середнього роду на -о);
		//-прізвища на -я (-йа або -а): Гойя, Золя;
		//-жіночі імена на приголосний, а також жіночі прізвища на -ін, -ов: Аліс, Долорес, Зейнаб; (Ельза) Вірхов, (Джеральдіна) Чаплін;
		//-російські прізвища на -ово, -ако, -их: Острово, Плевако, Гладких.
		If (ПоследняяБукваОкончания = 'а') and (ДлинаОкончания > 1) then begin
			фНеСклоняется := 1;
		end;
		If (Найти('іїую', ПоследняяБукваОкончания) > 0) and (ДлинаОкончания > 0) then begin
			фНеСклоняется := 1;
		end;
		If (СтрДлина(ФИО) > 0) and (Найти('ФИО', ФИО) > 0) then begin
			If Найти('огли кизи ', Слово) > 0 then begin
				фНеСклоняется := 1;
			end;
		end;
		If фНеСклоняется = 0 then begin
		  If (спИсключения.Получить('НеСклоняется') is СписокЗначений)
			and (СписокЗначений( спИсключения.Получить('НеСклоняется')).НайтиЗначение(Слово) > 0) then begin
				фНеСклоняется := 1;
			end;
		end;
		If фНеСклоняется = 1 then begin
			РезСлово := Слово;
			//Возврат РезСлово;
		end;
	end;

	КонечнаяСогласнаяОсновы := '';
	БезКонечнойСогласнойОсновы := '';
	If СтрДлина(СловоБезОкончания) > 0 then begin
		КонечнаяСогласнаяОсновы := Сред(Слово, СтрДлина(СловоБезОкончания), 1);
		If СтрДлина(СловоБезОкончания) > 1 then begin
			БезКонечнойСогласнойОсновы := Лев(СловоБезОкончания, СтрДлина(СловоБезОкончания) - 1);
		end;
	end;

	ПредКонечнаяОсновы := '';
	If СтрДлина(БезКонечнойСогласнойОсновы) > 1 then begin
		ПредКонечнаяОсновы := Сред(БезКонечнойСогласнойОсновы, СтрДлина(БезКонечнойСогласнойОсновы), 1);
	end;

	Группа := 0;
	Тип := '';

	ДвеКонечныеБуквыОсновы := ПредКонечнаяОсновы + КонечнаяСогласнаяОсновы;

	фПрилагательное := 0;
	If ЧастьРечи = 'П' then begin
		фПрилагательное := 1;
	end;
	If ЧастьРечи = '' then begin
	  If (спИсключения.Получить('КакСуществительные') is СписокЗначений)
		and (СписокЗначений( спИсключения.Получить('КакСуществительные')).НайтиЗначение(Слово) > 0) then begin
			ЧастьРечи := 'С';
			фСуществительное := 1;
			фПрилагательное := 0;
		end else
	  If (спИсключения.Получить('КакПрилагательные') is СписокЗначений)
		and (СписокЗначений( спИсключения.Получить('КакПрилагательные')).НайтиЗначение(Слово) > 0) then begin
			ЧастьРечи := 'П';
			фСуществительное := 0;
			фПрилагательное := 1;
		end;
	end;

  If (спИсключения.Получить('СреднийРод') is СписокЗначений)
	and (СписокЗначений( спИсключения.Получить('СреднийРод')).НайтиЗначение(Слово) > 0) then begin
		Пол := 'с';
	end;

	If ((ФИО = 'Ф') or (ФИО = 'Д') or (ЧастьРечи = 'П')) and (ЧастьРечи <> 'С') then begin
		If (Пол = 'м') then begin
			If КонечнаяСогласнаяОсновы = 'й' then begin
				If ПредКонечнаяОсновы = 'и' then begin
					фПрилагательное := 1;
					Тип := 'Т';
					If СтрДлина(СловоБезОкончания) >= 5 then begin
						If Прав(СловоБезОкончания, 5) = 'лиций' then begin
							Тип := 'Л';
						end;
					end;
				end else if ПредКонечнаяОсновы = 'і' then begin
					фПрилагательное := 1;
					Тип := 'М';
				end else if ПредКонечнаяОсновы = 'ї' then begin
					фПрилагательное := 1;
					Тип := 'Й';
				end;
				If фПрилагательное = 1 then begin
					СловоБезОкончания := Лев(СловоБезОкончания, СтрДлина(СловоБезОкончания) - 2);
				end;
			end else if (ДлинаСлова > 2)
			and (Найти('ов ев єв ів їв ий ін їн ', Прав(Слово, 2)+' ') > 0 ) then begin
				фПрилагательное := 1;
				Тип := '3';

				// Неясна зависимость подстановки 'о' or 'е' вместо 'і'
				//If (ПредКонечнаяОсновы = 'і')
				//и (Падеж <> 1) then begin
				//	СловоБезОкончания = Лев(СловоБезОкончания, СтрДлина(СловоБезОкончания) - 2) + 'о' + КонечнаяСогласнаяОсновы;
				//end;
			end;
		end;
		If (Пол = 'ж') or (ФИО = 'Д') then begin
			If (ПоследняяБукваОкончания = 'а')
			or (ПоследняяБукваОкончания = 'я') then begin
				// Попробуем определить, относится ли слово к прилагательным to окончанию из 3 символов
				//
				// Поиск нужно осуществлять to трем последним буквам женских фамилий с окончанием на -а, -я
				// If не нашли - значит скорее всего существительное
				// If нашли то не факт что прилагательное, есть исключения
				// гарантий нет, так как to окончанию определить часть речи невозможно
				стрТриБуквыОкончанияФамилииПрилагательные :=
				'лая, ная, рая, тая,'+
				'ава, ева, єва, іва, ова,'+
				'вга, лга,'+
				'бка, гка, дка, ика, цка, ька,'+
				'ала, ила, іла, сла, ула,'+
				'ана, бна, дна, жна, зна, їна, йна, нна, пна, рна, сна, тна, чна, шна, ьна, яна, іна, ина,'+
				'дня, жня, тня,'+
				'ата, ста,'+
				'дча,'+
				'';
				стрДвеБуквыОкончанияФамилииПрилагательные :=
				'ая,'+
				'';
				//If ЧастьРечи = '' then begin
				//	ЧастьРечи = '';
				//	If склНайтиВИсключениях(Слово, Страна, ИмяСпрИсключений, ЧастьРечи) = 1 then begin
				//		If ЧастьРечи = 'П' then begin
				//			фПрилагательное = 1;
				//		end else if ЧастьРечи = 'С' then begin
				//			фПрилагательное = 0;
				//			фСуществительное = 1;
				//		end;
				//	end;
				//end;
				If ЧастьРечи = '' then begin
					If Найти(стрТриБуквыОкончанияФамилииПрилагательные, Прав(Слово, 3) + ',') > 0 then begin
						фПрилагательное := 1;
					end else if Найти(стрДвеБуквыОкончанияФамилииПрилагательные, Прав(Слово, 2) + ',') > 0 then begin
						фПрилагательное := 1;
					end;
				end;
			end;

			If фПрилагательное = 1 then begin
				If ПоследняяБукваОкончания = 'а' then begin
					Пол := 'ж';
					Тип := 'Т';
				end else if ПоследняяБукваОкончания = 'я' then begin
					If склГласная(ПредпоследняяБукваОкончания, Страна) = 1 then begin
						Пол := 'ж';
						Тип := 'Й';
					end else begin
						Пол := 'ж';
						Тип := 'М';
						If СтрДлина(СловоБезОкончания) >= 3 then begin
							If Прав(СловоБезОкончания, 3) = 'лиц' then begin
								Тип := 'Л';
							end;
						end;
					end;
				end;
			end;
		end;
		If (Пол = 'с') or (ФИО = 'Д') then begin
			If ПоследняяБукваОкончания = 'е' then begin
				Пол := 'с';
				фПрилагательное := 1;
				Тип := 'Т';
				If СтрДлина(СловоБезОкончания) >= 3 then begin
					If Прав(СловоБезОкончания, 3) = 'лиц' then begin
						Тип := 'Л';
					end;
				end;
			end else if ПоследняяБукваОкончания = 'є' then begin
				Пол := 'с';
				фПрилагательное := 1;
				If склГласная(ПредпоследняяБукваОкончания, Страна) = 1 then begin
					Тип := 'Й';
				end else begin
					Тип := 'М';
				end;
			end;
		end;
	end;

	If (фПрилагательное = 0) or (ЧастьРечи = 'С') then begin
		// Отмечаем что существительное обработали, чтобы не сколнять дальнейшую составную часть должности
		ОбработалиСуществительноеДолжности := 1;

		//+іменники, що закінчуються на -е (-є): кафе, кашне, турне, каре, піке, протеже, Беранже, Гейне, Гете, Данте; ательє, Готьє, Лавуазьє;
		If (ПоследняяБукваОкончания = 'е')
		or (ПоследняяБукваОкончания = 'є') then begin
			фНеСклоняется := 1;
			РезСлово := Слово;
		end;
	end;
	If РезСлово <> '' then begin
    Result := склВернутьРег(РезСлово, ИсхСлово);
    Exit;
	end;

	If фПрилагательное = 1 then begin
		// Прилагательное
		If Пол = 'м' then begin
			// мужского рода
			If Тип = 'М' then begin
				// ій
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'ій';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'ього';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'ьому';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'ого'; // (-ій) любое
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'ім';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ьому'; // (-ім) любое
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = 'Т' then begin
				// -ий
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'ий';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'ого';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'ому';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'ого';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'им';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ому';
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = 'Й' then begin
				// -їй
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'їй';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'його';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'йому';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'його'; // (-їй)
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'їм';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'йому'; // (-їм)
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = 'Л' then begin
				// -лиций
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'ий';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'ього';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'ьому';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'ього'; // (-им)
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'им';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ьому';
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = '3' then begin
				// -ов ев єв ів їв ий ін їн
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания;
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'а';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'у';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'а';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'им';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 7 then begin
					РезСлово := СловоБезОкончания + 'е'; // or не склоняем
				end;
			end;
		end else if Пол = 'ж' then begin
			// женского
			If (Тип = 'М') or (Тип = 'Л') then begin
				// -я
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'я';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'ьої';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'ій';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'ю';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'ьою';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ій';
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = 'Т' then begin
				// -а
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'а';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'ої';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'ій';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'у';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'ою';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ій';
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = 'Й' then begin
				// -ая
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'я';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'йої';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'їй';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'ю';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'йою';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'їй';
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end;
		end else if Пол = 'с' then begin
			// среднего рода
			If Тип = 'М' then begin
				// -є
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'є';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'ього';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'ьому';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'є';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'ім';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ьому'; // (-ім) любое
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = 'Т' then begin
				// -е
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'е';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'ого';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'ому';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'е';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'им';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ому';
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = 'Й' then begin
				// -ає
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'є';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'його';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'йому';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'є';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'їм';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'йому'; // (-їм) любое
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end else if Тип = 'Л' then begin
				// -лице
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'е';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'ього';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'ьому';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'е';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'им';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ьому';
				end else if Падеж = 7 then begin
					РезСлово := Слово; // не склоняем
				end;
			end;
		end;

		//Сообщить(''+Слово+'. Группа: Прилагательное. Тип: '+Тип);

	end else if склПолучитьГруппуИТип(Слово, Группа, Тип, Окончание, ДлинаОкончания, ПоследняяБукваОкончания, КонечнаяСогласнаяОсновы, Пол, Страна) = 0 then begin
		//Возврат '';
		// Не склоняем, If не можем определить to правилам
		РезСлово := Слово;

	//end else if склНайтиВИсключениях(Слово, Страна, ИмяСпрИсключений) = 1 then begin

		// Не склоняем, If в исключениях
	//	РезСлово = Слово;

	end else begin
		// Существительное

		//Сообщить(''+Слово+'. Группа: '+Группа+'. Тип: '+Тип);

		If ДлинаОкончания > 1 then begin
			// Поправочка, не все окончание убираем, а только последнюю букву
			ОкончаниеБезПоследнейБуквыИ := Лев(Окончание, СтрДлина(Окончание) - 1);
			СловоБезОкончания := СловоБезОкончания + ОкончаниеБезПоследнейБуквыИ;
		end;

		If Группа = 1 then begin
			// 1-ая группа
			//
			//1.Українські чоловічі та жіночі імена, що в називному відмінку
			//	однини закінчуються на -а (-я), відмінються як відповідні
			//	іменники І відміни.
			//Примітка 1. Кінцеві приголосні основи г, к, х у жіночих іменах
			//						у давальному та місцевому відмінках однини перед
			//						закінченням -і змінюються на з, ц, с:
			//						Ольга - Ользі, Палажка - Палажці, Солоха - Солосі.
			//Примітка 2. У жіночих іменах типу Одарка, Параска в родовому
			//						відмінку множини в кінці основи між приголосними
			//						з'являється звук о: Одарок, Парасок.
			//

			If Тип = 'Т' then begin
				// твердая
				If (Пол = 'ж') or (ФИО = 'Д') then begin
			    If (Падеж = 3)
					or (Падеж = 6) then begin
						If КонечнаяСогласнаяОсновы = 'г' then begin
							СловоБезОкончания := БезКонечнойСогласнойОсновы + 'з';
						end else if КонечнаяСогласнаяОсновы = 'к' then begin
							СловоБезОкончания := БезКонечнойСогласнойОсновы + 'ц';
						end else if КонечнаяСогласнаяОсновы = 'х' then begin
							СловоБезОкончания := БезКонечнойСогласнойОсновы + 'с';
						end;
					end;
				end;
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'а';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'и';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'у';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'ою';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 7 then begin
					РезСлово := СловоБезОкончания + 'о';
				end;
			end else if Тип = 'М' then begin
				фДобавитьЗвучаниеЙ := 0;
				If (КонечнаяСогласнаяОсновы = 'й') then begin
					фДобавитьЗвучаниеЙ := 1;
				end;
				// мягкая
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'я';
				end else if Падеж = 2 then begin
					If (склГласная(ПредпоследняяБукваОкончания, Страна) = 1)
					or (фДобавитьЗвучаниеЙ = 1) then begin
						РезСлово := СловоБезОкончания + 'ї';
					end else begin
						РезСлово := СловоБезОкончания + 'і';
					end;
				end else if Падеж = 3 then begin
					If (склГласная(ПредпоследняяБукваОкончания, Страна) = 1)
					or (фДобавитьЗвучаниеЙ = 1) then begin
						РезСлово := СловоБезОкончания + 'ї';
					end else begin
						РезСлово := СловоБезОкончания + 'і';
					end;
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'ю';
				end else if Падеж = 5 then begin
					If (склГласная(ПредпоследняяБукваОкончания, Страна) = 1)
					or (фДобавитьЗвучаниеЙ = 1) then begin
						РезСлово := СловоБезОкончания + 'єю';
					end else begin
						РезСлово := СловоБезОкончания + 'ею';
					end;
				end else if Падеж = 6 then begin
					If (склГласная(ПредпоследняяБукваОкончания, Страна) = 1)
					or (фДобавитьЗвучаниеЙ = 1) then begin
						РезСлово := СловоБезОкончания + 'ї';
					end else begin
						РезСлово := СловоБезОкончания + 'і';
					end;
				end else if Падеж = 7 then begin
					If Пол = 'м' then begin
						РезСлово := СловоБезОкончания + 'є'; // Ілле (в книжке), Іллє (в ворде)
					end else begin
						If (склГласная(ПредпоследняяБукваОкончания, Страна) = 1)
						//or (фДобавитьЗвучаниеЙ = 1)
						then begin
							РезСлово := СловоБезОкончания + 'є';
						end else begin
							РезСлово := СловоБезОкончания + 'ю';
						end;
					end;
				end;
			end else if Тип = 'С' then begin
				// смешанная
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + 'а';
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'у';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'ею';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 7 then begin
					РезСлово := СловоБезОкончания + 'е';
				end;
			end;
		end else if Группа = 2 then begin
			// 2-ая группа

			//2. Українські чоловічі імена, що в називному відмінку однини закінчуються
			//	 на приголосний та -о , відмінюються як відповідні іменники ІІ відміни.
			//Примітка 1. В іменах типу Антін, Нестір, Нечипір, Прокіп, Сидір, Тиміш,
			//						Федір голосний і виступає тільки в називному відмінку,
			//						у непрямих - о: Антона, Антонові, Нестора, Несторові й т.д.,
			//						але: Лаврін - Лавріна, Олефір - Олефіра.
			//Примітка 2. Імена, що в називному відмінку закінчуються на -р, у родовому
			//						мають закінчення -а: Віктор - Віктора, Макар - Макара,
			//						але: Ігор - Ігоря, Лазар - Лазаря.
			//Примітка 3. Ім'я Лев при відмінюванні має паралельні форми: Лева й Льва, Левові й Львові та ін.

			// Чередование... Возможно For имен не чередуется?... Олег - М. Олегові
			//If (ФИО <> '') and (Найти('ФИО', ФИО) = 0) then begin
			//	// в фио не чередуются
		  //  If (Падеж = 3)
		  //  or (Падеж = 6) then begin
			//		If Найти('олег ', Слово+' ') = 0 then begin
			//			If КонечнаяСогласнаяОсновы = 'г' then begin
			//				СловоБезОкончания = БезКонечнойСогласнойОсновы + 'з';
			//			end else if КонечнаяСогласнаяОсновы = 'к' then begin
			//				СловоБезОкончания = БезКонечнойСогласнойОсновы + 'ц';
			//			end else if КонечнаяСогласнаяОсновы = 'х' then begin
			//				СловоБезОкончания = БезКонечнойСогласнойОсновы + 'с';
			//			end;
			//		end;
			//	end;
			//end;

			фДобавитьЗвучаниеЬ := 0;
			If (КонечнаяСогласнаяОсновы = 'ь') then begin
				// (Василь - в типе 'С')
				СловоБезОкончания := Лев(СловоБезОкончания, СтрДлина(СловоБезОкончания) - 1);
				Окончание := 'ь';
				фДобавитьЗвучаниеЬ := 1;
			end;

			фДобавитьЗвучаниеЙ := 0;
			If (КонечнаяСогласнаяОсновы = 'й')
			and (Тип = 'М') then begin
				// -ій (Сергій)
				СловоБезОкончания := Лев(СловоБезОкончания, СтрДлина(СловоБезОкончания) - 1);
				Окончание := 'й';
				фДобавитьЗвучаниеЙ := 1;
			end else if (ПредКонечнаяОсновы = 'і') and (ФИО = 'И') then begin
				// Проверка на исключения
				If Падеж <> 1 then begin
				  If (спИсключения.Получить('НетЧередованияИО') is СписокЗначений)
					and (СписокЗначений( спИсключения.Получить('НетЧередованияИО')).НайтиЗначение(Слово) = 0)
					//Найти('лаврін олефір леонід ', Слово+' ') = 0
					then begin
						If ((Падеж = 3) or (Падеж = 6)) and (Найти('яків ', Слово+' ') > 0) then begin
							// якобові
							КонечнаяСогласнаяОсновы := 'б';
						end;
						СловоБезОкончания := Лев(БезКонечнойСогласнойОсновы, СтрДлина(БезКонечнойСогласнойОсновы) - 1) + 'о' + КонечнаяСогласнаяОсновы;
					end;
				end;
			end else if Прав(Слово, 3) = 'ець' then begin
				If Прав(Слово, 5) = 'швець' then begin
					// Швець - Шевця
          if Падеж = 7 then begin
  					СловоБезОкончания := Лев(Слово, ДлинаСлова - 5) + 'шевч';
          end else begin
  					СловоБезОкончания := Лев(Слово, ДлинаСлова - 5) + 'шевц';
          end;
  			end else begin
					// Марганець - Марганця
					//СловоБезОкончания := Лев(БезКонечнойСогласнойОсновы, СтрДлина(БезКонечнойСогласнойОсновы) - 2) + ПредКонечнаяОсновы;
          if Падеж = 7 then begin
            СловоБезОкончания := Лев(БезКонечнойСогласнойОсновы, СтрДлина(БезКонечнойСогласнойОсновы) - 2) + 'ч';
//            СловоБезОкончания := Лев(Слово, ДлинаСлова - 3) + 'ч';
          end else begin
            СловоБезОкончания := Лев(БезКонечнойСогласнойОсновы, СтрДлина(БезКонечнойСогласнойОсновы) - 2) + 'ц';
            //СловоБезОкончания := Лев(Слово, ДлинаСлова - 3) + 'ц';
          end;
				end;
			end;

			If Тип = 'Т' then begin
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + Окончание;
				end else if Падеж = 2 then begin
				  If (спИсключения.Получить('РодительныйПадеж2огоСклоненияОкончаниеУЮ') is СписокЗначений)
					and (СписокЗначений( спИсключения.Получить('РодительныйПадеж2огоСклоненияОкончаниеУЮ')).НайтиЗначение(Слово) > 0) then begin
						РезСлово := СловоБезОкончания + 'у';
					end else begin
						РезСлово := СловоБезОкончания + 'а';
					end;
				end else if Падеж = 3 then begin
					//If ФИО = 'Д' then begin
						РезСлово := СловоБезОкончания + 'у'; //(-у) можно любое
					//end else begin
					//	РезСлово = СловоБезОкончания + 'ові'; //(-у) можно любое
					//end;
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + 'а';
				end else if Падеж = 5 then begin
					РезСлово := СловоБезОкончания + 'ом';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'ові';
				end else if Падеж = 7 then begin
          // ів (-їв), -ов -ев (-єв), -ин, -ін (-їн) == -e / -
          If Найти('ів їв ов ев єв ин ін їн ', Прав(Слово, 2) + ' ') > 0 then begin
            РезСлово := СловоБезОкончания + 'е';
          end else begin
            РезСлово := СловоБезОкончания + 'у';
          end;
//					If Найти('олег ', Слово+' ') > 0 then begin
//						РезСлово := СловоБезОкончания + 'у';
//					end else begin
//						РезСлово := СловоБезОкончания + 'е'; //(-у) можно только одно, зависимость неясна
//					end;
				end;
			end else if (Тип = 'М') or (Тип = 'С') then begin
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + Окончание;
				end else if Падеж = 2 then begin
					If ((КонечнаяСогласнаяОсновы = 'р') and (
		  		(спИсключения.Получить('МягкаяР') is СписокЗначений)
					and (СписокЗначений( спИсключения.Получить('МягкаяР')).НайтиЗначение(Слово) = 0)
					//Найти('ігор лазар секретар ', Слово+' ') = 0
					))
					or (склШипящая(КонечнаяСогласнаяОсновы, Страна) = 1) then begin
		  			If (спИсключения.Получить('РодительныйПадеж2огоСклоненияОкончаниеУЮ') is СписокЗначений)
						and (СписокЗначений( спИсключения.Получить('РодительныйПадеж2огоСклоненияОкончаниеУЮ')).НайтиЗначение(Слово) > 0) then begin
							РезСлово := СловоБезОкончания + 'у';
						end else begin
							РезСлово := СловоБезОкончания + 'а';
						end;
					end else begin
		  			If (спИсключения.Получить('РодительныйПадеж2огоСклоненияОкончаниеУЮ') is СписокЗначений)
						and (СписокЗначений( спИсключения.Получить('РодительныйПадеж2огоСклоненияОкончаниеУЮ')).НайтиЗначение(Слово) > 0) then begin
							РезСлово := СловоБезОкончания + 'ю';
						end else begin
							РезСлово := СловоБезОкончания + 'я';
						end;
					end;
				end else if Падеж = 3 then begin
					If (фДобавитьЗвучаниеЙ = 1) or (фДобавитьЗвучаниеЬ = 1) then begin
						//If ФИО = 'Д' then begin
							РезСлово := СловоБезОкончания + 'ю';
						//end else begin
						//	РезСлово = СловоБезОкончания + 'єві'; //(-ю) можно любое
						//end;
					end else begin
						//If ФИО = 'Д' then begin
						If Тип = 'М' then begin
							РезСлово := СловоБезОкончания + 'ю';
						end else if Тип = 'С' then begin
							РезСлово := СловоБезОкончания + 'у';
						end;
						//end else begin
						//	РезСлово = СловоБезОкончания + 'еві'; //(-ю) можно любое
						//end;
					end;
				end else if Падеж = 4 then begin
					If ((КонечнаяСогласнаяОсновы = 'р') and (
				  (спИсключения.Получить('МягкаяР') is СписокЗначений)
					and (СписокЗначений( спИсключения.Получить('МягкаяР')).НайтиЗначение(Слово) = 0)
					//Найти('ігор лазар секретар ', Слово+' ') = 0
					))
					or (склШипящая(КонечнаяСогласнаяОсновы, Страна) = 1) then begin
						РезСлово := СловоБезОкончания + 'а';
					end else begin
						РезСлово := СловоБезОкончания + 'я';
					end;
				end else if Падеж = 5 then begin
					If фДобавитьЗвучаниеЙ = 1 then begin
						РезСлово := СловоБезОкончания + 'єм';
					end else begin
						РезСлово := СловоБезОкончания + 'ем';
					end;
				end else if Падеж = 6 then begin
					If фДобавитьЗвучаниеЙ = 1 then begin
						РезСлово := СловоБезОкончания + 'єві';
					end else begin
						РезСлово := СловоБезОкончания + 'еві';
					end;
				end else if Падеж = 7 then begin
//          If ((КонечнаяСогласнаяОсновы = 'р') and (
//				  (спИсключения.Получить('МягкаяР') is СписокЗначений)
//					and (СписокЗначений( спИсключения.Получить('МягкаяР')).НайтиЗначение(Слово) = 0)
//					//Найти('ігор лазар секретар ', Слово+' ') = 0
//					))
//					or (склШипящая(КонечнаяСогласнаяОсновы, Страна) = 1) then begin
          If (склШипящая(КонечнаяСогласнаяОсновы, Страна) = 1) then begin
            РезСлово := СловоБезОкончания + 'е';
          end else if (Тип = 'М') and (Прав(Слово, 3) = 'ець') then begin
            РезСлово := СловоБезОкончания + 'е';
					end else if (фДобавитьЗвучаниеЙ = 1) or (фДобавитьЗвучаниеЬ = 1) then begin
						РезСлово := СловоБезОкончания + 'ю';
					end else begin
						РезСлово := СловоБезОкончания + 'у';
          end;

//					If (склШипящая(КонечнаяСогласнаяОсновы, Страна) = 1) then begin
//						РезСлово := СловоБезОкончания + 'у';
//					end else if (фДобавитьЗвучаниеЙ = 1) or (фДобавитьЗвучаниеЬ = 1) then begin
//						РезСлово := СловоБезОкончания + 'ю';
//					end else begin
//						РезСлово := СловоБезОкончания + 'е'; //(-ю) можно только одно, зависимость частично ясна
//					end;
				end;
			end;
		end else if Группа = 3 then begin
			// 3-тья группа
			If (КонечнаяСогласнаяОсновы = 'ь') then begin
				// (Нінель)
				СловоБезОкончания := Лев(СловоБезОкончания, СтрДлина(СловоБезОкончания) - 1);
				Окончание := 'ь';

				КонечнаяСогласнаяОсновы := '';
				БезКонечнойСогласнойОсновы := '';
				If СтрДлина(СловоБезОкончания) > 0 then begin
					КонечнаяСогласнаяОсновы := Сред(Слово, СтрДлина(СловоБезОкончания), 1);
					If СтрДлина(СловоБезОкончания) > 1 then begin
						БезКонечнойСогласнойОсновы := Лев(СловоБезОкончания, СтрДлина(СловоБезОкончания) - 1);
					end;
				end;

				ПредКонечнаяОсновы := '';
				If СтрДлина(БезКонечнойСогласнойОсновы) > 1 then begin
					ПредКонечнаяОсновы := Сред(БезКонечнойСогласнойОсновы, СтрДлина(БезКонечнойСогласнойОсновы), 1);
				end;
			end;
			// Чередование -і- -о-
			// неясна зависимоть.

			If Слово = 'мати' then begin
				If Падеж = 1 then begin
					РезСлово := 'мати';
				end else if Падеж = 2 then begin
					РезСлово := 'матері';
				end else if Падеж = 3 then begin
					РезСлово := 'матері';
				end else if Падеж = 4 then begin
					РезСлово := 'матір';
				end else if Падеж = 5 then begin
					РезСлово := 'матірю';
				end else if Падеж = 6 then begin
					РезСлово := 'матері';
				end else if Падеж = 7 then begin
					РезСлово := 'мати';
				end;
			end else begin
				If Падеж = 1 then begin
					РезСлово := СловоБезОкончания + Окончание;
				end else if Падеж = 2 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 3 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 4 then begin
					РезСлово := СловоБезОкончания + Окончание;
				end else if Падеж = 5 then begin
					// якщо основа іменника закінчується одним приголосним (крім губного та р),
					// то після голосного перед закінченням цей приголосний подовжується
					// (на письмі подвоюється): височінн-ю, віссю , в'яззю, міддю;
					// якщо основа іменника закінчується сполученням приголосних або на губний
					// (б, п, в, м, ф), а також на р, щ, то подовження не відбувається:
					// верф'ю, вісс-ю, матір-ю, радіст-ю.

					If (Найти('мвбпфр', КонечнаяСогласнаяОсновы) = 0)
					and (склГласная(ПредКонечнаяОсновы, Страна) = 1) then begin
						СловоБезОкончания := СловоБезОкончания + КонечнаяСогласнаяОсновы;
					end else if Тип = 'Т' then begin
						// For изначально твердых окончаний основ - добавляется апостроф (Любов'ю)
						СловоБезОкончания := СловоБезОкончания + '''';
					end;

					РезСлово := СловоБезОкончания + 'ю';
				end else if Падеж = 6 then begin
					РезСлово := СловоБезОкончания + 'і';
				end else if Падеж = 7 then begin
					РезСлово := СловоБезОкончания + 'е';
				end;
			end;

		end;

	end;

	//Сообщить('П.'+Падеж+'. '+Слово+'. ОбработалиСуществительноеДолжности = '+ОбработалиСуществительноеДолжности+'. РезСлово: '+РезСлово);

  Result := склВернутьРег(РезСлово, ИсхСлово);

end;

//-----------------------------------------------------
function склОпределитьПолПоОтчеству(Отчество: String): String;
var
  КонецОтчества: String;
begin
	КонецОтчества := Нрег(Прав(Отчество, 4));
	If СтрДлина(КонецОтчества) > 0 then begin
		If (Прав(КонецОтчества, 2) = 'ич')
		or (Прав(КонецОтчества, 2) = 'іч') then begin
			Result := 'м';
		end else if Прав(КонецОтчества, 3) = 'вна' then begin
			// івна, ївна
			Result := 'ж';
		end else if КонецОтчества = 'огли' then begin
			Result := 'м';
		end else if КонецОтчества = 'кизи' then begin
			Result := 'ж';
		end else begin
			Result := '-';
		end;
	end else begin
		Result := '-';
	end;
end;

//-----------------------------------------------------
function склСклонятьФИО(ФИО, Пол: string; Падеж: byte = 2; Страна: string = 'UA'; СократитьИО: byte = 0; ПроверятьПол: byte = 1): String;
var
	Фамилия,
	Имя,
	Отчество,
	РезФамилия,
	РезИмя,
	РезОтчество,
  врПол: string;
  ОбработалиСуществительноеДолжности: Byte;
begin
	// Отдельно Фамилия, Имя, Отчество
	Пол := Нрег(Пол);
	Фамилия := '';
	Имя := '';
	Отчество := '';
	склИзвлечьФИО(ФИО, Фамилия, Имя, Отчество);

  ОбработалиСуществительноеДолжности := 0;

	If ПроверятьПол = 1 then begin
		врПол := склОпределитьПолПоОтчеству(Отчество);
		If врПол <> '-' then begin
			If Пол <> '' then begin
				If (врПол <> Пол) then begin
					// Контроль правильности указания пола
					Сообщить('Неверно указан пол: '+Пол+'. У '+ФИО+'. Правильный пол: '+врПол);
				end;
			end;
			Пол := врПол;
		end else begin
			If ВыводитьНеопределенности = 1 then begin
				// Контроль правильности указания отчества
				Сообщить('Невозможно определить пол to отчеству у '+ФИО);
			end;
		end;
	end;

	РезФамилия := склСклонятьСлово(Фамилия, Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, 'Ф');
	If СократитьИО = 0 then begin
		РезИмя := склСклонятьСлово(Имя, Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, 'И');
		РезОтчество := склСклонятьСлово(Отчество, Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, 'О');
	end else begin
		РезИмя := Лев(Имя, 1) + '.';
		РезОтчество := Лев(Отчество, 1) + '.';
	end;

	Result := '';
	If ПустаяСтрока(РезФамилия) = 0 then begin
		Result := Result + РезФамилия;
	end;
	If ПустаяСтрока(РезИмя) = 0 then begin
		Result := Result + ' ' + РезИмя;
	end;
	If ПустаяСтрока(РезОтчество) = 0 then begin
		Result := Result + ' ' + РезОтчество;
	end;
end;

//-----------------------------------------------------
function склСклонятьФИО3(Фамилия, Имя, Отчество, Пол: string; Падеж: byte = 2; Страна: string = 'UA'; СократитьИО: byte = 0; ПроверятьПол: byte = 1): String;
var
	ФИО,
	РезФамилия,
	РезИмя,
	РезОтчество,
  врПол: string;
  ОбработалиСуществительноеДолжности: Byte;
begin
	// Отдельно Фамилия, Имя, Отчество
	Пол := Нрег(Пол);
  ФИО := Фамилия+' '+Имя+' '+Отчество;

  ОбработалиСуществительноеДолжности := 0;

	If ПроверятьПол = 1 then begin
		врПол := склОпределитьПолПоОтчеству(Отчество);
		If врПол <> '-' then begin
			If Пол <> '' then begin
				If (врПол <> Пол) then begin
					// Контроль правильности указания пола
					Сообщить('Неверно указан пол: '+Пол+'. У '+ФИО+'. Правильный пол: '+врПол);
				end;
			end;
			Пол := врПол;
		end else begin
			If ВыводитьНеопределенности = 1 then begin
				// Контроль правильности указания отчества
				Сообщить('Невозможно определить пол to отчеству у '+ФИО);
			end;
		end;
	end;

	РезФамилия := склСклонятьСлово(Фамилия, Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, 'Ф');
	If СократитьИО = 0 then begin
		РезИмя := склСклонятьСлово(Имя, Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, 'И');
		РезОтчество := склСклонятьСлово(Отчество, Пол, ОбработалиСуществительноеДолжности, Падеж, Страна, 'О');
	end else begin
		РезИмя := Лев(Имя, 1) + '.';
		РезОтчество := Лев(Отчество, 1) + '.';
	end;

	Result := '';
	If ПустаяСтрока(РезФамилия) = 0 then begin
		Result := Result + РезФамилия;
	end;
	If ПустаяСтрока(РезИмя) = 0 then begin
		Result := Result + ' ' + РезИмя;
	end;
	If ПустаяСтрока(РезОтчество) = 0 then begin
		Result := Result + ' ' + РезОтчество;
	end;
end;

//-----------------------------------------------------
function склСловаВСписок(Слова: String): СписокЗначений;
var
	сп: СписокЗначений;
  ПозицияНачала,
  к,
  Длина: Integer;
  Слово: String;
begin
	сп := СписокЗначений.Create;

	ПозицияНачала := 1;
	Длина := СтрДлина(Слова);
	For к := 1 to Длина do begin
		If Найти(' -.,/()?[]', Сред(Слова, к, 1)) > 0 then begin
			If к - 1 > ПозицияНачала + 1 then begin
				Слово := Сред(Слова, ПозицияНачала, к - ПозицияНачала);
				сп.ДобавитьЗначение(Слово);
				ПозицияНачала := к + 1;
			end;
		end;
	end;
	If Длина - 1 > ПозицияНачала + 1 then begin
		Слово := Сред(Слова, ПозицияНачала, Длина - ПозицияНачала + 1);
		сп.ДобавитьЗначение(Слово);
	end;

	Result := сп;
end;


//-----------------------------------------------------
function склСклонятьДолжность(Должность, Отдел, Пол: String; Падеж: Byte = 2; Страна: String = 'UA'): String;
var
	врПол,
  РезДолжность,
  РезОтдел,
  РезОтделТворительный,
  НрегРезОтдел,
  РезДолжность2,
  РезДолжность5,
  врСлово,
  ПервоеСловоОтдела: String;
  ПадежОтдела,
  ОбработалиСуществительноеДолжности: Byte;
  спСловаДолжности,
  спСловаДолжности2,
  спСловаДолжности5: СписокЗначений;
  к,
  ПозПробел: Integer;
begin
	//If (Пол <> 'м') and (Пол <> 'ж') then begin
		врПол := 'м';
	//end;

  ОбработалиСуществительноеДолжности := 0;

	РезДолжность := Нрег(склСклонятьСлово(Должность, врПол, ОбработалиСуществительноеДолжности, Падеж, Страна, 'Д'));
	If СокрЛП(РезДолжность) <> '' then begin
		ПадежОтдела := 2;
	end else begin
		ПадежОтдела := Падеж;
	end;
  ОбработалиСуществительноеДолжности := 0;
	РезОтдел := склСклонятьСлово(Отдел, врПол, ОбработалиСуществительноеДолжности, ПадежОтдела, Страна, 'Д');
  ОбработалиСуществительноеДолжности := 0;
	РезОтделТворительный := склСклонятьСлово(Отдел, врПол, ОбработалиСуществительноеДолжности, 5, Страна, 'Д');

	// Попробуем убрать лишние слова при родительном падеже отдела
	НрегРезОтдел := Нрег(РезОтдел);
	РезДолжность2 := РезДолжность;
	спСловаДолжности := склСловаВСписок(РезДолжность2);
	For к := 1 to спСловаДолжности.РазмерСписка() do begin
		врСлово := спСловаДолжности.ПолучитьЗначение(к);
		If Найти(НрегРезОтдел, врСлово + ' ') > 0 then begin
			РезДолжность2 := СтрЗаменить(РезДолжность2, ' ' + врСлово, '');
		end else if Найти(НрегРезОтдел, ' ' + врСлово) > 0 then begin
			РезДолжность2 := СтрЗаменить(РезДолжность2, ' ' + врСлово, '');
		end;
	end;

	// При творительном падеже отдела
	НрегРезОтдел := Нрег(РезОтделТворительный);
	РезДолжность5 := РезДолжность;
	спСловаДолжности := склСловаВСписок(РезДолжность5);
	For к := 1 to спСловаДолжности.РазмерСписка() do begin
		врСлово := спСловаДолжности.ПолучитьЗначение(к);
		If Найти(РезОтделТворительный, врСлово + ' ') > 0 then begin
			РезДолжность5 := СтрЗаменить(РезДолжность5, ' ' + врСлово, '');
		end else if Найти(РезОтделТворительный, ' ' + врСлово) > 0 then begin
			РезДолжность5 := СтрЗаменить(РезДолжность5, ' ' + врСлово, '');
		end;
	end;

	// Оставим вариант с меньшим числом слов должности
	спСловаДолжности2 := склСловаВСписок(РезДолжность2);
	спСловаДолжности5 := склСловаВСписок(РезДолжность5);
	If спСловаДолжности2.РазмерСписка() <= спСловаДолжности5.РазмерСписка() then begin
		РезДолжность := РезДолжность2;
	end else begin
		РезДолжность := РезДолжность5;
		РезОтдел := РезОтделТворительный;
	end;

	ПозПробел := Найти(Отдел, ' ');
	If ПозПробел = 0 then begin
		ПервоеСловоОтдела := Отдел;
	end else begin
		ПервоеСловоОтдела := Лев(Отдел, ПозПробел - 1);
	end;

  If спИсключения.Получить('НижнийРегистрПервоеСловоОтдела') is СписокЗначений then begin
    If СписокЗначений( спИсключения.Получить('НижнийРегистрПервоеСловоОтдела')).НайтиЗначение(Нрег(ПервоеСловоОтдела)) > 0 then begin
      If Врег(Отдел) <> Отдел then begin
        // Если не все капитализированные, тогда ставим нижний регистр для первого символа
        РезОтдел := Нрег(Лев(РезОтдел, 1)) + Сред(РезОтдел, 2);
      end;
    end;
  end;

	Result := '';
	If ПустаяСтрока(РезДолжность) = 0 then begin
		Result := Result + РезДолжность;
	end;
	If ПустаяСтрока(РезОтдел) = 0 then begin
		If Result <> '' then begin
			Result := Result + ' ';
		end;
		Result := Result + РезОтдел;
	end;

end;

////-----------------------------------------------------
//procedure Сформировать();
//begin
//
//	спИмя = СоздатьОбъект('СписокЗначений');
//	спОтчество = СоздатьОбъект('СписокЗначений');
//	спОкончания = СоздатьОбъект('СписокЗначений');
//
//	ДатаС = '01.01.1800';
//	ДатаПо = '31.12.2200';
//
//	тз = зпТзСотрудникиПоПодразделениям(Подразеделение, ДатаС, ДатаПо, , , , , , , Сотрудник);
//
//	глПрогрессСоздать(тз.КоличествоСтрок());
//
//	тз.ВыбратьСтроки();
//	While тз.ПолучитьСтроку() = 1 do begin
//		глПрогресс();
//		//Фамилия = '';
//		//Имя = '';
//		//Отчество = '';
//		//склИзвлечьФИО(тз.Сотрудник.Наименование, Фамилия, Имя, Отчество);
//		Пол = ?(тз.Сотрудник.Пол = Перечисление.Пол.мужской, 'м', 'ж');
//		Должность = тз.ОсновноеМесто.МестоРаботы.Должность.ПолноеНаименование;
//		Отдел = тз.Подразделение.ПолноеНаименование;
//
//		Сообщить(''+склСклонятьФИО(тз.Сотрудник.Наименование, Пол, 3)+', '+склСклонятьДолжность(Должность, Отдел, 3));
//
//		//врИмя = '';
//		//For к = 1 to 7 do begin
//		//	врИмя = врИмя + к + '. ' + склСклонятьФИО(тз.Сотрудник.Наименование, Пол, к, , 0) + '.';
//		//end;
//		//If спИмя.НайтиЗначение(врИмя) = 0 then begin
//		//	спИмя.ДобавитьЗначение(врИмя);
//		//end;	
//		
////		врИмя = '';
////		For к = 1 to 7 do begin
////			врИмя = врИмя + к + '. ' + склСклонятьСлово(Имя, Пол, к, , 'И') + '.';
////		end;	
////		If спИмя.НайтиЗначение(врИмя) = 0 then begin
////			спИмя.ДобавитьЗначение(врИмя);
////		end;
////		
////		врИмя = '';
////		For к = 1 to 7 do begin
////			врИмя = врИмя + к + '. ' + склСклонятьСлово(Фамилия, Пол, к, , 'Ф') + '.';
////		end;	
////		If спИмя.НайтиЗначение(врИмя) = 0 then begin
////			спИмя.ДобавитьЗначение(врИмя);
////		end;
////
////		врИмя = '';
////		For к = 1 to 7 do begin
////			врИмя = врИмя + к + '. ' + склСклонятьСлово(Должность, 'м', к, , 'Д') + '.';
////		end;	
////		If спИмя.НайтиЗначение(врИмя) = 0 then begin
////			спИмя.ДобавитьЗначение(врИмя);
////		end;	
////
////		врИмя = '';
////		For к = 1 to 7 do begin
////			врИмя = врИмя + к + '. ' + склСклонятьСлово(тз.ОсновноеМесто.Подразделение, 'м', к, , 'Д') + '.';
////		end;	
////		If спИмя.НайтиЗначение(врИмя) = 0 then begin
////			спИмя.ДобавитьЗначение(врИмя);
////		end;	
////
////		If спОтчество.НайтиЗначение(Отчество) = 0 then begin
////			спОтчество.ДобавитьЗначение(Отчество);
////		end;
//		
////		СловоБезОкончания = '';
////		Окончание = склОкончание(Фамилия, СловоБезОкончания);
////
////		КонечнаяСогласнаяОсновы = '';
////		БезКонечнойСогласнойОсновы = '';
////		If СтрДлина(СловоБезОкончания) > 0 then begin
////			КонечнаяСогласнаяОсновы = Сред(Фамилия, СтрДлина(СловоБезОкончания), 1);
////			If СтрДлина(СловоБезОкончания) > 1 then begin
////				БезКонечнойСогласнойОсновы = Лев(СловоБезОкончания, СтрДлина(СловоБезОкончания) - 1);
////			end;
////		end;	
////	
////		ПредКонечнаяОсновы = '';
////		If СтрДлина(БезКонечнойСогласнойОсновы) > 1 then begin
////			ПредКонечнаяОсновы = Сред(БезКонечнойСогласнойОсновы, СтрДлина(БезКонечнойСогласнойОсновы), 1);
////		end;
////
////		ДвеКонечныеБуквыОсновы = ПредКонечнаяОсновы + КонечнаяСогласнаяОсновы;
////		
////		//ОкончаниеИ = склОкончание(Отчество);
////		If ((Окончание = 'а') or (Окончание = 'я')) and (Пол = 'ж') then begin
////
////			If спОкончания.НайтиЗначение(ДвеКонечныеБуквыОсновы+Окончание) = 0 then begin
////				спОкончания.ДобавитьЗначение(ДвеКонечныеБуквыОсновы+Окончание);
////			end;	
////		
////		end;
//		
//	end;	
//
//	спИмя.СортироватьПоПредставлению();
//	спОтчество.СортироватьПоПредставлению();
//	спОкончания.СортироватьПоПредставлению();
//	
//	Сообщить('Имена:'+'(нет кого). (дать кому). (найти кого). (кем). (на ком). (звать)');
//	For к = 1 to спИмя.РазмерСписка() do begin
//		Сообщить(спИмя.ПолучитьЗначение(к));
//	end;
//
//	//Сообщить('Отчества:');
//	//For к = 1 to спОтчество.РазмерСписка() do begin
//	//	Сообщить(спОтчество.ПолучитьЗначение(к));
//	//end;
//
//	Сообщить('Окончания:');
//	For к = 1 to спОкончания.РазмерСписка() do begin
//		Сообщить(спОкончания.ПолучитьЗначение(к));
//	end;

	//
	//+ ИМЕНА
	//
	
	// Апостроф - должен считаться как гласная в данном случае
	//+ 1. Дар'я .2. Дар'і .3. Дар'і .4. Дар'ю .5. Дар'ею .6. Дар'і .7. Дар'є .
	//+ 1. Дар'я .2. Дар'ї .3. Дар'ї .4. Дар'ю .5. Дар'єю .6. Дар'ї .7. Дар'є .
	
	// -а -я (пред гласная)
	//+ 1. Євдокіа .2. Євдокіи .3. Євдоці .4. Євдокіу .5. Євдокіою .6. Євдоці .7. Євдокіо . //Ольховська Євдокія Павлівна
	//+ 1. Іа .2. Іи .3. Іі .4. Іу .5. Іою .6. Іі .7. Іо .                                  // ИЯ
	//+ 1. Зоа .2. Зои .3. Зоі .4. Зоу .5. Зоою .6. Зоі .7. Зоо .
  
	// -ор -ер
	//+ 1. Федор .2. Федора .3. Федореві .4. Федора .5. Федорем .6. Федореві .7. Федоре .
	//+ 1. Віктор .2. Віктора .3. Віктореві .4. Віктора .5. Вікторем .6. Віктореві .7. Вікторе .
	//+ 1. Єгор .2. Єгора .3. Єгореві .4. Єгора .5. Єгорем .6. Єгореві .7. Єгоре .

	// 7-ой
	//+ 1. Ілля .2. Іллі .3. Іллі .4. Іллю .5. Іллею .6. Іллі .7. Ілле .           (7 - неверно вроде)
	//+ 1. Леся .2. Лесі .3. Лесі .4. Лесю .5. Лесею .6. Лесі .7. Лесє .                      (7 - Лесю)
	//+ 1. Ася .2. Асі .3. Асі .4. Асю .5. Асею .6. Асі .7. Асє .
	//+ 1. Женя .2. Жені .3. Жені .4. Женю .5. Женею .6. Жені .7. Женє .
	//* Ігорю
	//+ 1. Наталя .2. Наталі .3. Наталі .4. Наталю .5. Наталею .6. Наталі .7. Наталє .
	//+ 1. Неля .2. Нелі .3. Нелі .4. Нелю .5. Нелею .6. Нелі .7. Нелє .
	//+ 1. Олег .2. Олега .3. Олегові .4. Олега .5. Олегом .6. Олегові .7. Олеге .
	//+ 1. Олеся .2. Олесі .3. Олесі .4. Олесю .5. Олесею .6. Олесі .7. Олесє .
	
	
	// -еві -ові, -ем -ом
	//+ 1. Артур .2. Артура .3. Артуреві .4. Артура .5. Артурем .6. Артуреві .7. Артуре .
	//+ 1. Володимир .2. Володимира .3. Володимиреві .4. Володимира .5. Володимирем .6. Володимиреві .7. Володимире .

	//Исключения
	//+ 1. Магінур .2. Магінурі .3. Магінурі .4. Магінур .5. Магінур'ю .6. Магінурі .7. Магінуре .
	//+  1. Леонід .2. Леонода .3. Леонодові .4. Леонода .5. Леонодом .6. Леонодові .7. Леоноде .
	//+36  1. Яків .2. Якова .3. Яковові .4. Якова .5. Яковом .6. Яковові .7. Якове .

	//247  1. Іслам .2. Іслама .3. Ісламові .4. Іслама .5. Ісламом .6. Ісламові .7. Ісламе .
	//257  1. Маріана .2. Маріани .3. Маріані .4. Маріану .5. Маріаною .6. Маріані .7. Маріано .
	//234567  1. Рустам .2. Рустама .3. Рустамові .4. Рустама .5. Рустамом .6. Рустамові .7. Рустаме .
	//все  1. Сабіра .2. Сабіри .3. Сабірі .4. Сабіру .5. Сабірою .6. Сабірі .7. Сабіро .
	
	//+5 1. Нінель .2. Нінелі .3. Нінелі .4. Нінель .5. Нінел'ю .6. Нінелі .7. Нінеле .
	//+ 1. Яков .2. Якова .3. Яковові .4. Якова .5. Яковом .6. Яковові .7. Якове .

	//+ 1. Данил .2. Данила .3. Данилові .4. Данила .5. Данилом .6. Данилові .7. Даниле .
	
	//
	//* ФАМИЛИИ
	//О Нет четкого склонения фамилий ж.рода, так как немогу определить существительное/прилагательное основы
	//
	
	//+ 1. талалай.2. талалайа.3. талалайові.4. талалайа.5. талалайом.6. талалайові.7. талалайе.
	//+ 1. таратута.2. таратутої.3. таратутій.4. таратуту.5. таратутою.6. таратутій.7. таратута. (надо как существительное, а определилось как прилагательное)
	//    нужно отфильтовать to окончаниям на -а -я, какие идут в конце основы буквы, возможно на основании их можно
	//О   определить существительное/прилагательное For женского рода
	//    If попадает в выборку прилагательных окончаний и
	//    а) существительное из словаря - значит склоняется как существительное
	//    б) нет существительного в словаре - как прилагательное
	//
	//
	
	//+ 1. шаря.2. шарйої.3. шарїй.4. шарю.5. шарйою.6. шарїй.7. шарая.
	//+ Составные - каждое слово нужно склонять
	//+ 1. лозова-беpезіна.2. лозова-беpезіної.3. лозова-беpезіній.4. лозова-беpезіну.5. лозова-беpезіною.6. лозова-беpезіній.7. лозова-беpезіна.
	//+ уходящая е перед ц
  //+ 1. Кобець.2. Кобця.3. Кобцєві.4. Кобця.5. Кобцем.6. Кобцеві.7. Кобцю.

	//
	//+ ЧИСЛИТЕЛЬНЫЕ (С ЧИСЛАМИ and БЕЗ) (нереализованы составные числительные)
	//
	//+ 1. 2-а Кpивоpiзька н/к.2. 2А-и Кpивоpiзька н/к.3. 2У-і Кpивоpiзька н/к.4. 2А-у Кpивоpiзька н/к.5. 2ОМ-ою Кpивоpiзька н/к.6. 2ОВІ-і Кpивоpiзька н/к.7. 2Е-о Кpивоpiзька н/к.
	//+ 1. Перша Нiкопольська н/к.2. Першої Нiкопольської н/ка.3. Першій Нiкопольській н/ку.4. Першу Нiкопольську н/ка.5. Першою Нiкопольською н/ком.6. Першій Нiкопольській н/кові.7. Перша Нiкопольська н/ке.
	//

	//
	//+ АББРЕВИАТУРЫ (Нужен словарь аббревиатур, or считать что слова с капитализацией and есть аббревиатуры and не склонять)
	//
	//+ 1. ДВС в м. Жовті Води.2. ДВСА в м. Жовті Води.3. ДВСУ в м. Жовті Води.4. ДВСА в м. Жовті Води.5. ДВСОМ в м. Жовті Води.6. ДВСОВІ в м. Жовті Води.7. ДВСЕ в м. Жовті Води.
	//


	//
	//+ ПРИЛАГАТЕЛЬНЫЕ на -е
	//
	//+ 1. Криворiзьке рай.ВДВС.2. Криворiзьке рай.ВДВС.3. Криворiзьке рай.ВДВС.4. Криворiзьке рай.ВДВС.5. Криворiзьке рай.ВДВС.6. Криворiзьке рай.ВДВС.7. Криворiзьке рай.ВДВС.
	//

	//
	//* Определение рода For частей составных слов... (друкарка - ж, секретар - м)
	//* For 1-Т Обошел через разрешение замены к-г-х на ц-з-с
	//
	//+ 1. Секретар-друкарка.2. Секретаря-друкарки.3. Секретарю-друкаркі.4. Секретаря-друкарку.5. Секретарем-друкаркою.6. Секретареві-друкаркі.7. Секретаре-друкарко.
	//+ 1. Секретар-друкарка.2. Секретаря-друкарки.3. Секретарю-друкарці.4. Секретаря-друкарку.5. Секретарем-друкаркою.6. Секретареві-друкарці.7. Секретаре-друкарко.
	//

	//
	// При склонении должности-отдела может возникать повторение: начальник відділу відділу державної вик. служби,
	// в таком случае повторение должно исключаться
	//
	
	//
	// Множественное число нереализовано. Надо ли?
	// Пример: пл.послуги
	//
//end;

////-----------------------------------------------------
//function ЕстьКолонка(тз: ТаблицаЗначений; ИмяКолонки: String): Byte;
//var
//	квсего,
//  к: Integer;
//begin
//	Result := 0;
//	квсего := тз.КоличествоКолонок();
//	For к := 1 to квсего do begin
//		If Нрег(тз.ПолучитьПараметрыКолонки(к)) = Нрег(ИмяКолонки) then begin
//			Result := 1;
//      Break;
//		end;
//	end;
//end;

//-----------------------------------------------------
procedure ОчиститьИсключения();
var i: integer;
begin
  if Assigned(спИсключения) then begin
  	for i := 0 to спИсключения.Count - 1 do
      СписокЗначений(спИсключения.Objects[i]).Free;
	  спИсключения.Free;
  end;
  спИсключения := nil;
end;

//-----------------------------------------------------
procedure ИсключенияИзСтрокиВСтруктуру(ОбъектТекст: Текст);
var
	квсего,
  к,
  ПозКомментарий: Integer;
  стр,
  секция: String;
  сп: СписокЗначений;

begin
 	ОчиститьИсключения();
	спИсключения := СписокЗначений.Create;
	квсего := ОбъектТекст.КоличествоСтрок();
	стр := '';
	секция := '';
	For к := 1 to квсего do begin
		стр := ОбъектТекст.ПолучитьСтроку(к);
		ПозКомментарий := Найти(стр, ';');
		If ПозКомментарий > 0 then begin
			стр := Лев(стр, ПозКомментарий - 1);
		end;
		стр := СокрЛП(стр);
    If стр = '' then
    	Continue;
		If (Лев(стр, 1) = '[') and (Прав(стр, 1) = ']') then begin
			секция := Сред(стр, 2, СтрДлина(стр) - 2);
			If СокрЛП(секция) = '' then begin
				Continue;
			end;
			сп := СписокЗначений.Create;
			спИсключения.Установить(секция, сп);
			Continue;
		end;
		If СокрЛП(секция) = '' then begin
			Continue;
		end;
		сп.ДобавитьЗначение(Нрег(стр));
	end;
end;

////-----------------------------------------------------
//procedure СклонитьСФормы();
//begin
//
////	врПадеж = спПадеж.ПолучитьЗначение(спПадеж.ТекущаяСтрока());
////	вРезультат = склСклонятьФИО(вФИО, вПол, врПадеж)+', '+склСклонятьДолжность(вДолжность, вОтдел, вПол, врПадеж);
//
//	//
//	// 2. родительный
//	// Яковлевої Інни Миколаївни, першого кращого заступника начальника відділу відділа нотаріату Головного управління юстиції
//	//
//	//+відділ просклонялся and несовпал.
//	// придется делать более тщательно - сравнивать без окончания,
//	// and убирать первое слово из отдела
//	// но там возможно выпадение букв из основы при склонении,
//	// это надо как-то учесть (сравнивать без последней гласной)
//	//
//	//+Сделал If склоняются обе части - то используем For отдела дательный падеж
//	//
//
//end;

//-----------------------------------------------------
function ОбновитьФайлИсключений(): Boolean;
var
  ТИсключения: Текст;
begin

	Result := True;
	ТИсключения := Текст.Create;
  Try
    //ТИсключения.КодоваяСтраница(0);
    If FileExists(ИмяФайлаИсключений) then begin
      ТИсключения.Открыть(ИмяФайлаИсключений);
      //ТИсключения.КодоваяСтраница(0);
    end else begin
      Try
        ТИсключения.ДобавитьСтроку(стрБазовыеИсключения);
        ТИсключения.Записать(ИмяФайлаИсключений);
      Except
        Result := False;
      End;
    end;
    ИсключенияИзСтрокиВСтруктуру(ТИсключения);
  Finally
  	ТИсключения.Free;
  End;

end;

//-----------------------------------------------------
procedure LibExit(Reason: Integer);
const
  DLL_PROCESS_DETACH = 0;
  DLL_PROCESS_ATTACH = 1;
  DLL_THREAD_ATTACH  = 2;
  DLL_THREAD_DETACH  = 3;
begin
  if Reason = DLL_PROCESS_DETACH then begin
    DeInit();
  end;
  if Assigned(SaveDLLProc) then
	  SaveDllProc(Reason);		// call saved entry point procedure
end;

//-----------------------------------------------------
procedure Init;
var
	Путь: String;
  i: integer;
  t1, t2: TDateTime;
  s: string;
begin

  фДемо := 0;
  стрБазовыеИсключения := '; Словарь исключений из правил при склонении   '+РазделительСтрок+
  '; При склонении -р смягчается                                          '+РазделительСтрок+
  '[МягкаяР]                                                              '+РазделительСтрок+
  'Ігор                ;Ігоря                                             '+РазделительСтрок+
  'Лазар               ;Лазаря                                            '+РазделительСтрок+
  'Секретар            ;Секретаря                                         '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '; При склонении не чередуется і-о                                      '+РазделительСтрок+
  '[НетЧередованияИО]                                                     '+РазделительСтрок+
  'Лаврін              ;Лавріна                                           '+РазделительСтрок+
  'Олефір              ;Олефіра                                           '+РазделительСтрок+
  'Леонід              ;Леоніда                                           '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '; Склонять как существительные                                         '+РазделительСтрок+
  '[КакСуществительные]                                                   '+РазделительСтрок+
  'Гідзула             ;Гідзули                                           '+РазделительСтрок+
  'Дружина             ;Дружини                                           '+РазделительСтрок+
  'Завалихата          ;...                                               '+РазделительСтрок+
  'Іволга                                                                 '+РазделительСтрок+
  'Іговіна                                                                '+РазделительСтрок+
  'Капуста                                                                '+РазделительСтрок+
  'Лопата                                                                 '+РазделительСтрок+
  'Притула                                                                '+РазделительСтрок+
  'Прядка                                                                 '+РазделительСтрок+
  'Рева                                                                   '+РазделительСтрок+
  'Рябіна                                                                 '+РазделительСтрок+
  'Сарана                                                                 '+РазделительСтрок+
  'Щербина                                                                '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '; Другие существительные, которые программа склоняет как прилагательные   '+РазделительСтрок+
  'водій                                                                  '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '; Склонять как прилагательные                                          '+РазделительСтрок+
  '[КакПрилагательные]                                                    '+РазделительСтрок+
  'Плоха               ;Плохої                                            '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '; Другие прилагательные, которые программа склоняет как существительные   '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '; Несклоняемые первые части составных слов (и ФИО)                     '+РазделительСтрок+
  '[НеСклоняетсяПередДефисом]                                             '+РазделительСтрок+
  'пресс               ; -центр, -аташе, -секретар                        '+РазделительСтрок+
  'санкт               ; -петербург                                       '+РазделительСтрок+
  'риск                ; -менеджер                                        '+РазделительСтрок+
  'веб                 ; -дізайнер                                        '+РазделительСтрок+
  'арт                 ; -директор                                        '+РазделительСтрок+
  'дн                  ; Дн-вськ (Дніпропетровськ)                        '+РазделительСтрок+
  'центрально                                                             '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '; Переводить в нижний регистр первый символ For отдела при склонении должность+отдел  '+РазделительСтрок+
  '[НижнийРегистрПервоеСловоОтдела]                                       '+РазделительСтрок+
  'відділ              ;Відділ -> відділ                                  '+РазделительСтрок+
  'підрозділ                                                              '+РазделительСтрок+
  'апарат                                                                 '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  ';                                                                      '+РазделительСтрок+
  '[РодительныйПадеж2огоСклоненияОкончаниеУЮ]                             '+РазделительСтрок+
  'відділ              ; начальник відділу                                '+РазделительСтрок+
  'підрозділ                                                              '+РазделительСтрок+
  'апарат                                                                 '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '; Существительные среднего рода                                        '+РазделительСтрок+
  '[СреднийРод]                                                           '+РазделительСтрок+
  'управління                                                             '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '[НеСклоняется]                                                         '+РазделительСтрок+
  'пані                                                                   '+РазделительСтрок+
  'авто                                                                   '+РазделительСтрок+
  'бюро                                                                   '+РазделительСтрок+
  'депо                                                                   '+РазделительСтрок+
  'кіно                                                                   '+РазделительСтрок+
  'манто                                                                  '+РазделительСтрок+
  'метро                                                                  '+РазделительСтрок+
  'радіо                                                                  '+РазделительСтрок+
  'Арно                                                                   '+РазделительСтрок+
  'Буало                                                                  '+РазделительСтрок+
  'Гюго                                                                   '+РазделительСтрок+
  'Дідро                                                                  '+РазделительСтрок+
  'Лонгфелло                                                              '+РазделительСтрок+
  'Тюссо                                                                  '+РазделительСтрок+
  'Глазго                                                                 '+РазделительСтрок+
  'Гойя                                                                   '+РазделительСтрок+
  'Золя                                                                   '+РазделительСтрок+
  'Аліс                                                                   '+РазделительСтрок+
  'Долорес                                                                '+РазделительСтрок+
  'Зейнаб                                                                 '+РазделительСтрок+
  'Острово                                                                '+РазделительСтрок+
  'Плевако                                                                '+РазделительСтрок+
  'Гладких                                                                '+РазделительСтрок+
  '                                                                       '+РазделительСтрок+
  '';

  SaveDllProc := @DllProc;		// save exit procedure chain
  DllProc := @LibExit;		    // install LibExit exit procedure

  StatusProc := nil;
  MessageProc := nil;
  фДемо := 0;

	Путь := '';
  Путь := ExtractFilePath(ParamStr(0));
	ИмяФайлаИсключений := Путь+'padeg_ua.dic';
  ОбновитьФайлИсключений();

  ВыводитьНеопределенности := 1;

end;

//-----------------------------------------------------
procedure DeInit;
begin
 	ОчиститьИсключения();
end;

begin

end.
